syntax = "proto3";

package kurrentdb.protocol.v2;

option csharp_namespace    = "KurrentDB.Protocol.Streams.V2";
option java_package        = "io.kurrentdb.protocol.streams.v2";
option java_multiple_files = true;

import "google/protobuf/timestamp.proto";
import "google/protobuf/descriptor.proto";
import "kurrentdb/protocols/v2/core.proto";

// ErrorDetails provides detailed information about specific error conditions.
message ErrorDetails {
    // When the user does not have sufficient permissions to perform the
    // operation.
    message AccessDenied {
      option (error_info) = {
        code : "ACCESS_DENIED",
        severity : RECOVERABLE,
        message : "The user does not have sufficient permissions to perform the operation."
      };
    }

  // When the stream has been deleted.
  message StreamDeleted {
    option (error_info) = {
      code : "STREAM_DELETED",
      severity : RECOVERABLE,
      message : "The stream has been soft deleted. It will not be visible in the stream list, until it is restored by appending to it again."
    };

    // The name of the stream that was deleted.
    optional string stream = 1;

    // The time when the stream was deleted.
    google.protobuf.Timestamp deleted_at = 2;
  }

  // When the stream has been tombstoned.
  message StreamTombstoned {
    option (error_info) = {
      code : "STREAM_TOMBSTONED",
      severity : RECOVERABLE,
      message : "The stream has been tombstoned and cannot be used anymore."
    };

    // The name of the stream that was tombstoned.
    optional string stream = 1;

    // The time when the stream was tombstoned.
    google.protobuf.Timestamp tombstoned_at = 2;
  }

  // When the stream is not found.
  message StreamNotFound {
    option (error_info) = {
      code : "STREAM_NOT_FOUND",
      severity : RECOVERABLE,
      message : "The specified stream was not found."
    };

    // The name of the stream that was not found.
    optional string stream = 1;
  }

  // When the expected revision of the stream does not match the actual
  // revision.
  message StreamRevisionConflict {
    option (error_info) = {
      code : "REVISION_CONFLICT",
      severity : RECOVERABLE,
      message : "The actual stream revision does not match the expected revision."
    };

    // The actual revision of the stream.
    int64 stream_revision = 1 [jstype = JS_STRING];
  }

  // When the transaction exceeds the maximum size allowed
  // (its bigger than the configured chunk size).
  message TransactionMaxSizeExceeded {
    option (error_info) = {
      code : "TRANSACTION_MAX_SIZE_EXCEEDED",
      severity : FATAL,
      message : "The transaction exceeds the maximum size allowed."
    };

    // The maximum allowed size of the transaction.
    uint32 max_size = 1;
  }

  // When the user is not found.
  message UserNotFound {
    option (error_info) = {
      code : "USER_NOT_FOUND",
      severity : RECOVERABLE,
      message : "The specified user was not found."
    };
  }

  // When the user is not authenticated.
  message NotAuthenticated {
    option (error_info) = {
      code : "NOT_AUTHENTICATED",
      severity : RECOVERABLE,
      message : "The user is not authenticated."
    };
  }

  message LogPositionNotFound {
    option (error_info) = {
      code : "LOG_POSITION_NOT_FOUND",
      severity : RECOVERABLE,
      message : "The specified log position was not found."
    };
  }
}
