// ******************************************************************************************
// This protocol is UNSTABLE in the sense of being subject to change.
// ******************************************************************************************

syntax = "proto3";

package kurrentdb.protocol.v2.streams.errors;

option csharp_namespace = "KurrentDB.Protocol.V2.Streams.Errors";

import "kurrentdb/protocols/v2/rpc.proto";

enum StreamsError {
  // Default value. This value is not used.
  // An error code MUST always be set to a non-zero value.
  // If an error code is not explicitly set, it MUST be treated as
  // an internal server error (INTERNAL).
  STREAMS_ERROR_UNSPECIFIED = 0;

  // The stream was not found.
  // This is recoverable by the client by creating the stream first.
  STREAMS_ERROR_STREAM_NOT_FOUND = 1 [(kurrent.rpc.error) = {
    status_code: NOT_FOUND,
    has_details: true,
  }];

  // The stream already exists.
  // This is recoverable by the client by using the existing stream.
  STREAMS_ERROR_STREAM_ALREADY_EXISTS = 2 [(kurrent.rpc.error) = {
    status_code: ALREADY_EXISTS,
    has_details: true
  }];

  // The stream has been soft deleted.
  // It will not be visible in the stream list, until it is restored by appending to it again.
  STREAMS_ERROR_STREAM_DELETED = 3 [(kurrent.rpc.error) = {
    status_code: FAILED_PRECONDITION,
    has_details: true
  }];

  // The stream has been tombstoned.
  // It has been permanently removed from the system and cannot be restored.
  STREAMS_ERROR_STREAM_TOMBSTONED = 4 [(kurrent.rpc.error) = {
    status_code: FAILED_PRECONDITION,
    has_details: true
  }];

  // The expected revision of the stream does not match the actual revision.
  // This is recoverable by the client by fetching the current revision and retrying.
  STREAMS_ERROR_STREAM_REVISION_CONFLICT = 5 [(kurrent.rpc.error) = {
    status_code: FAILED_PRECONDITION,
    has_details: true
  }];

  // The size of a record being appended exceeds the maximum allowed size.
  // It is recoverable by the client by sending a smaller record.
  STREAMS_ERROR_APPEND_RECORD_SIZE_EXCEEDED = 6 [(kurrent.rpc.error) = {
    status_code: INVALID_ARGUMENT,
    has_details: true
  }];

  // When the transaction exceeds the maximum size allowed (max chunk size).
  // It is recoverable by the client by sending a smaller transaction.
  STREAMS_ERROR_APPEND_TRANSACTION_SIZE_EXCEEDED = 7 [(kurrent.rpc.error) = {
    status_code: ABORTED,
    has_details: true
  }];

  // The stream is already in an append session.
  // Appending to the same stream multiple times is currently not supported.
  STREAMS_ERROR_STREAM_ALREADY_IN_APPEND_SESSION = 8 [(kurrent.rpc.error) = {
    status_code: ABORTED,
    has_details: true
  }];
}

message StreamNotFoundErrorDetails {
  // The name of the stream that was not found.
  string stream = 1;
}

message StreamAlreadyExistsErrorDetails {
  // The name of the stream that already exists.
  string stream = 1;
}

message StreamDeletedErrorDetails {
  // The name of the stream that was deleted.
  string stream = 1;
}

message StreamTombstonedErrorDetails {
  // The name of the stream that was tombstoned.
  string stream = 1;
}

message StreamRevisionConflictErrorDetails {
  // The name of the stream that had a revision conflict.
  string stream = 1;
  // The actual revision of the stream.
  int64 expected_revision = 2 [jstype = JS_STRING];
  // The actual revision of the stream.
  int64 actual_revision = 3 [jstype = JS_STRING];
}

message AppendRecordSizeExceededErrorDetails {
  // The name of the stream where the append was attempted.
  string stream = 1;
  // The identifier of the offending and oversized record.
  string record_id = 2;
  // The size of the huge record in bytes.
  int32 size = 3;
  // The maximum allowed size of a single record that can be appended in bytes.
  int32 max_size = 4;
}

message AppendTransactionSizeExceededErrorDetails {
  // The size of the huge transaction in bytes.
  int32 size = 1;
  // The maximum allowed size of the append transaction in bytes.
  int32 max_size = 2;
}

message StreamAlreadyInAppendSessionErrorDetails {
  // The name of the stream that is already in an append session.
  string stream = 1;
}
