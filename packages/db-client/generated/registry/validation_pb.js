// source: registry/validation.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var registry_shared_pb = require('../registry/shared_pb.js');
goog.object.extend(proto, registry_shared_pb);
goog.exportSymbol('proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.SchemaIdentifierCase', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityResponse', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityErrorKind', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.displayName = 'proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult.repeatedFields_, null);
};
goog.inherits(proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult.displayName = 'proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.oneofGroups_);
};
goog.inherits(proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.displayName = 'proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityResponse.displayName = 'proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo.displayName = 'proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.toObject = function(includeInstance, msg) {
  var f, obj = {
    kind: jspb.Message.getFieldWithDefault(msg, 1, 0),
    details: jspb.Message.getFieldWithDefault(msg, 2, ""),
    propertyPath: jspb.Message.getFieldWithDefault(msg, 3, ""),
    originalType: jspb.Message.getFieldWithDefault(msg, 4, ""),
    newType: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError}
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError;
  return proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError}
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityErrorKind} */ (reader.readEnum());
      msg.setKind(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetails(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPropertyPath(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOriginalType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDetails();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional SchemaCompatibilityErrorKind kind = 1;
 * @return {!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityErrorKind}
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.prototype.getKind = function() {
  return /** @type {!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityErrorKind} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityErrorKind} value
 * @return {!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError} returns this
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.prototype.setKind = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string details = 2;
 * @return {string}
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.prototype.getDetails = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError} returns this
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.prototype.setDetails = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string property_path = 3;
 * @return {string}
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.prototype.getPropertyPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError} returns this
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.prototype.setPropertyPath = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError} returns this
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.prototype.clearPropertyPath = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.prototype.hasPropertyPath = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string original_type = 4;
 * @return {string}
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.prototype.getOriginalType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError} returns this
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.prototype.setOriginalType = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError} returns this
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.prototype.clearOriginalType = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.prototype.hasOriginalType = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string new_type = 5;
 * @return {string}
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.prototype.getNewType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError} returns this
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.prototype.setNewType = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError} returns this
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.prototype.clearNewType = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.prototype.hasNewType = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    isCompatible: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    schemaVersionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    errorsList: jspb.Message.toObjectList(msg.getErrorsList(),
    proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult}
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult;
  return proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult}
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsCompatible(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchemaVersionId(value);
      break;
    case 3:
      var value = new proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError;
      reader.readMessage(value,proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.deserializeBinaryFromReader);
      msg.addErrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsCompatible();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getSchemaVersionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool is_compatible = 1;
 * @return {boolean}
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult.prototype.getIsCompatible = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult} returns this
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult.prototype.setIsCompatible = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string schema_version_id = 2;
 * @return {string}
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult.prototype.getSchemaVersionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult} returns this
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult.prototype.setSchemaVersionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated SchemaCompatibilityError errors = 3;
 * @return {!Array<!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError>}
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult.prototype.getErrorsList = function() {
  return /** @type{!Array<!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError, 3));
};


/**
 * @param {!Array<!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError>} value
 * @return {!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult} returns this
*/
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult.prototype.setErrorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError=} opt_value
 * @param {number=} opt_index
 * @return {!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError}
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult.prototype.addErrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityError, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult} returns this
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult.prototype.clearErrorsList = function() {
  return this.setErrorsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.SchemaIdentifierCase = {
  SCHEMA_IDENTIFIER_NOT_SET: 0,
  SCHEMA_NAME: 1,
  SCHEMA_VERSION_ID: 2
};

/**
 * @return {proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.SchemaIdentifierCase}
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.prototype.getSchemaIdentifierCase = function() {
  return /** @type {proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.SchemaIdentifierCase} */(jspb.Message.computeOneofCase(this, proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    schemaName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    schemaVersionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    definition: msg.getDefinition_asB64(),
    dataFormat: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest}
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest;
  return proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest}
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchemaName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchemaVersionId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDefinition(value);
      break;
    case 4:
      var value = /** @type {!proto.kurrentdb.protocol.registry.v2.SchemaDataFormat} */ (reader.readEnum());
      msg.setDataFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDefinition_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getDataFormat();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string schema_name = 1;
 * @return {string}
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.prototype.getSchemaName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest} returns this
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.prototype.setSchemaName = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest} returns this
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.prototype.clearSchemaName = function() {
  return jspb.Message.setOneofField(this, 1, proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.prototype.hasSchemaName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string schema_version_id = 2;
 * @return {string}
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.prototype.getSchemaVersionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest} returns this
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.prototype.setSchemaVersionId = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest} returns this
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.prototype.clearSchemaVersionId = function() {
  return jspb.Message.setOneofField(this, 2, proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.prototype.hasSchemaVersionId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes definition = 3;
 * @return {!(string|Uint8Array)}
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.prototype.getDefinition = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes definition = 3;
 * This is a type-conversion wrapper around `getDefinition()`
 * @return {string}
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.prototype.getDefinition_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDefinition()));
};


/**
 * optional bytes definition = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDefinition()`
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.prototype.getDefinition_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDefinition()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest} returns this
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.prototype.setDefinition = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional SchemaDataFormat data_format = 4;
 * @return {!proto.kurrentdb.protocol.registry.v2.SchemaDataFormat}
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.prototype.getDataFormat = function() {
  return /** @type {!proto.kurrentdb.protocol.registry.v2.SchemaDataFormat} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.kurrentdb.protocol.registry.v2.SchemaDataFormat} value
 * @return {!proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest} returns this
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityRequest.prototype.setDataFormat = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    validationResult: (f = msg.getValidationResult()) && proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityResponse}
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityResponse;
  return proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityResponse}
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult;
      reader.readMessage(value,proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult.deserializeBinaryFromReader);
      msg.setValidationResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidationResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional SchemaCompatibilityResult validation_result = 2;
 * @return {?proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult}
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityResponse.prototype.getValidationResult = function() {
  return /** @type{?proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult} */ (
    jspb.Message.getWrapperField(this, proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult, 2));
};


/**
 * @param {?proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityResult|undefined} value
 * @return {!proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityResponse} returns this
*/
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityResponse.prototype.setValidationResult = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityResponse} returns this
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityResponse.prototype.clearValidationResult = function() {
  return this.setValidationResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.registry.v2.CheckSchemaCompatibilityResponse.prototype.hasValidationResult = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    schemaVersionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    schemaDefinition: msg.getSchemaDefinition_asB64(),
    dataFormat: jspb.Message.getFieldWithDefault(msg, 3, 0),
    compatibility: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo}
 */
proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo;
  return proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo}
 */
proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchemaVersionId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSchemaDefinition(value);
      break;
    case 3:
      var value = /** @type {!proto.kurrentdb.protocol.registry.v2.SchemaDataFormat} */ (reader.readEnum());
      msg.setDataFormat(value);
      break;
    case 4:
      var value = /** @type {!proto.kurrentdb.protocol.registry.v2.CompatibilityMode} */ (reader.readEnum());
      msg.setCompatibility(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSchemaVersionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSchemaDefinition_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getDataFormat();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getCompatibility();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string schema_version_id = 1;
 * @return {string}
 */
proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo.prototype.getSchemaVersionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo} returns this
 */
proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo.prototype.setSchemaVersionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes schema_definition = 2;
 * @return {!(string|Uint8Array)}
 */
proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo.prototype.getSchemaDefinition = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes schema_definition = 2;
 * This is a type-conversion wrapper around `getSchemaDefinition()`
 * @return {string}
 */
proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo.prototype.getSchemaDefinition_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSchemaDefinition()));
};


/**
 * optional bytes schema_definition = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSchemaDefinition()`
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo.prototype.getSchemaDefinition_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSchemaDefinition()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo} returns this
 */
proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo.prototype.setSchemaDefinition = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional SchemaDataFormat data_format = 3;
 * @return {!proto.kurrentdb.protocol.registry.v2.SchemaDataFormat}
 */
proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo.prototype.getDataFormat = function() {
  return /** @type {!proto.kurrentdb.protocol.registry.v2.SchemaDataFormat} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.kurrentdb.protocol.registry.v2.SchemaDataFormat} value
 * @return {!proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo} returns this
 */
proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo.prototype.setDataFormat = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional CompatibilityMode compatibility = 4;
 * @return {!proto.kurrentdb.protocol.registry.v2.CompatibilityMode}
 */
proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo.prototype.getCompatibility = function() {
  return /** @type {!proto.kurrentdb.protocol.registry.v2.CompatibilityMode} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.kurrentdb.protocol.registry.v2.CompatibilityMode} value
 * @return {!proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo} returns this
 */
proto.kurrentdb.protocol.registry.v2.SchemaValidationInfo.prototype.setCompatibility = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.kurrentdb.protocol.registry.v2.SchemaCompatibilityErrorKind = {
  SCHEMA_COMPATIBILITY_ERROR_KIND_UNSPECIFIED: 0,
  SCHEMA_COMPATIBILITY_ERROR_KIND_MISSING_REQUIRED_PROPERTY: 1,
  SCHEMA_COMPATIBILITY_ERROR_KIND_INCOMPATIBLE_TYPE_CHANGE: 2,
  SCHEMA_COMPATIBILITY_ERROR_KIND_OPTIONAL_TO_REQUIRED: 3,
  SCHEMA_COMPATIBILITY_ERROR_KIND_NEW_REQUIRED_PROPERTY: 4,
  SCHEMA_COMPATIBILITY_ERROR_KIND_REMOVED_PROPERTY: 5,
  SCHEMA_COMPATIBILITY_ERROR_KIND_ARRAY_TYPE_INCOMPATIBILITY: 6
};

goog.object.extend(exports, proto.kurrentdb.protocol.registry.v2);
