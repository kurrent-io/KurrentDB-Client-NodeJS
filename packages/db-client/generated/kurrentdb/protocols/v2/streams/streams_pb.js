// source: kurrentdb/protocols/v2/streams/streams.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
goog.object.extend(proto, google_protobuf_duration_pb);
var google_protobuf_descriptor_pb = require('google-protobuf/google/protobuf/descriptor_pb.js');
goog.object.extend(proto, google_protobuf_descriptor_pb);
var kurrentdb_protocols_v2_streams_shared_pb = require('../../../../kurrentdb/protocols/v2/streams/shared_pb.js');
goog.object.extend(proto, kurrentdb_protocols_v2_streams_shared_pb);
var kurrentdb_protocols_v2_core_pb = require('../../../../kurrentdb/protocols/v2/core_pb.js');
goog.object.extend(proto, kurrentdb_protocols_v2_core_pb);
goog.exportSymbol('proto.kurrentdb.protocol.v2.AppendRecord', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.AppendStreamFailure', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.AppendStreamFailure.ErrorCase', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.AppendStreamRequest', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.AppendStreamResponse', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.AppendStreamResponse.ResultCase', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.AppendStreamSuccess', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.ExpectedRevisionConstants', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.Heartbeat', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.HeartbeatOptions', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.HeartbeatType', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.MultiStreamAppendRequest', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.MultiStreamAppendResponse', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.ResultCase', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.ReadDirection', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.ReadFailure', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.ReadFailure.ErrorCase', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.ReadFilter', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.ReadFilterScope', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.ReadPositionConstants', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.ReadRequest', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.ReadResponse', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.ReadResponse.ResultCase', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.ReadSuccess', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.Record', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.AppendRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kurrentdb.protocol.v2.AppendRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.AppendRecord.displayName = 'proto.kurrentdb.protocol.v2.AppendRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.kurrentdb.protocol.v2.AppendStreamRequest.repeatedFields_, null);
};
goog.inherits(proto.kurrentdb.protocol.v2.AppendStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.AppendStreamRequest.displayName = 'proto.kurrentdb.protocol.v2.AppendStreamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.AppendStreamSuccess = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kurrentdb.protocol.v2.AppendStreamSuccess, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.AppendStreamSuccess.displayName = 'proto.kurrentdb.protocol.v2.AppendStreamSuccess';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.kurrentdb.protocol.v2.AppendStreamFailure.oneofGroups_);
};
goog.inherits(proto.kurrentdb.protocol.v2.AppendStreamFailure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.AppendStreamFailure.displayName = 'proto.kurrentdb.protocol.v2.AppendStreamFailure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.kurrentdb.protocol.v2.AppendStreamResponse.oneofGroups_);
};
goog.inherits(proto.kurrentdb.protocol.v2.AppendStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.AppendStreamResponse.displayName = 'proto.kurrentdb.protocol.v2.AppendStreamResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.repeatedFields_, null);
};
goog.inherits(proto.kurrentdb.protocol.v2.MultiStreamAppendRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.displayName = 'proto.kurrentdb.protocol.v2.MultiStreamAppendRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.oneofGroups_);
};
goog.inherits(proto.kurrentdb.protocol.v2.MultiStreamAppendResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.displayName = 'proto.kurrentdb.protocol.v2.MultiStreamAppendResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.repeatedFields_, null);
};
goog.inherits(proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.displayName = 'proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.repeatedFields_, null);
};
goog.inherits(proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.displayName = 'proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.ReadFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.kurrentdb.protocol.v2.ReadFilter.repeatedFields_, null);
};
goog.inherits(proto.kurrentdb.protocol.v2.ReadFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.ReadFilter.displayName = 'proto.kurrentdb.protocol.v2.ReadFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.Record = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kurrentdb.protocol.v2.Record, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.Record.displayName = 'proto.kurrentdb.protocol.v2.Record';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.ReadSuccess = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.kurrentdb.protocol.v2.ReadSuccess.repeatedFields_, null);
};
goog.inherits(proto.kurrentdb.protocol.v2.ReadSuccess, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.ReadSuccess.displayName = 'proto.kurrentdb.protocol.v2.ReadSuccess';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.ReadFailure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.kurrentdb.protocol.v2.ReadFailure.oneofGroups_);
};
goog.inherits(proto.kurrentdb.protocol.v2.ReadFailure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.ReadFailure.displayName = 'proto.kurrentdb.protocol.v2.ReadFailure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.ReadRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kurrentdb.protocol.v2.ReadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.ReadRequest.displayName = 'proto.kurrentdb.protocol.v2.ReadRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.ReadResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.kurrentdb.protocol.v2.ReadResponse.oneofGroups_);
};
goog.inherits(proto.kurrentdb.protocol.v2.ReadResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.ReadResponse.displayName = 'proto.kurrentdb.protocol.v2.ReadResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.HeartbeatOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kurrentdb.protocol.v2.HeartbeatOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.HeartbeatOptions.displayName = 'proto.kurrentdb.protocol.v2.HeartbeatOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.Heartbeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kurrentdb.protocol.v2.Heartbeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.Heartbeat.displayName = 'proto.kurrentdb.protocol.v2.Heartbeat';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.AppendRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.AppendRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.AppendRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.AppendRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    propertiesMap: (f = msg.getPropertiesMap()) ? f.toObject(includeInstance, proto.kurrentdb.protocol.DynamicValue.toObject) : [],
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.AppendRecord}
 */
proto.kurrentdb.protocol.v2.AppendRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.AppendRecord;
  return proto.kurrentdb.protocol.v2.AppendRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.AppendRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.AppendRecord}
 */
proto.kurrentdb.protocol.v2.AppendRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecordId(value);
      break;
    case 2:
      var value = msg.getPropertiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.kurrentdb.protocol.DynamicValue.deserializeBinaryFromReader, "", new proto.kurrentdb.protocol.DynamicValue());
         });
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.AppendRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.AppendRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.AppendRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.AppendRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPropertiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.kurrentdb.protocol.DynamicValue.serializeBinaryToWriter);
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string record_id = 1;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.AppendRecord.prototype.getRecordId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.AppendRecord} returns this
 */
proto.kurrentdb.protocol.v2.AppendRecord.prototype.setRecordId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.AppendRecord} returns this
 */
proto.kurrentdb.protocol.v2.AppendRecord.prototype.clearRecordId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.AppendRecord.prototype.hasRecordId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<string, kurrentdb.protocol.DynamicValue> properties = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.kurrentdb.protocol.DynamicValue>}
 */
proto.kurrentdb.protocol.v2.AppendRecord.prototype.getPropertiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.kurrentdb.protocol.DynamicValue>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.kurrentdb.protocol.DynamicValue));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.kurrentdb.protocol.v2.AppendRecord} returns this
 */
proto.kurrentdb.protocol.v2.AppendRecord.prototype.clearPropertiesMap = function() {
  this.getPropertiesMap().clear();
  return this;};


/**
 * optional bytes data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.kurrentdb.protocol.v2.AppendRecord.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.kurrentdb.protocol.v2.AppendRecord.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.AppendRecord.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.kurrentdb.protocol.v2.AppendRecord} returns this
 */
proto.kurrentdb.protocol.v2.AppendRecord.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.AppendStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: jspb.Message.getFieldWithDefault(msg, 1, ""),
    recordsList: jspb.Message.toObjectList(msg.getRecordsList(),
    proto.kurrentdb.protocol.v2.AppendRecord.toObject, includeInstance),
    expectedRevision: jspb.Message.getFieldWithDefault(msg, 3, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamRequest}
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.AppendStreamRequest;
  return proto.kurrentdb.protocol.v2.AppendStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamRequest}
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStream(value);
      break;
    case 2:
      var value = new proto.kurrentdb.protocol.v2.AppendRecord;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.AppendRecord.deserializeBinaryFromReader);
      msg.addRecords(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readSint64String());
      msg.setExpectedRevision(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.AppendStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.kurrentdb.protocol.v2.AppendRecord.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeSint64String(
      3,
      f
    );
  }
};


/**
 * optional string stream = 1;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.prototype.getStream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamRequest} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.prototype.setStream = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated AppendRecord records = 2;
 * @return {!Array<!proto.kurrentdb.protocol.v2.AppendRecord>}
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.prototype.getRecordsList = function() {
  return /** @type{!Array<!proto.kurrentdb.protocol.v2.AppendRecord>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.kurrentdb.protocol.v2.AppendRecord, 2));
};


/**
 * @param {!Array<!proto.kurrentdb.protocol.v2.AppendRecord>} value
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamRequest} returns this
*/
proto.kurrentdb.protocol.v2.AppendStreamRequest.prototype.setRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.kurrentdb.protocol.v2.AppendRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.kurrentdb.protocol.v2.AppendRecord}
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.prototype.addRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.kurrentdb.protocol.v2.AppendRecord, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamRequest} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.prototype.clearRecordsList = function() {
  return this.setRecordsList([]);
};


/**
 * optional sint64 expected_revision = 3;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.prototype.getExpectedRevision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamRequest} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.prototype.setExpectedRevision = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamRequest} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.prototype.clearExpectedRevision = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.prototype.hasExpectedRevision = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.AppendStreamSuccess.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.AppendStreamSuccess.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamSuccess} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.AppendStreamSuccess.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: jspb.Message.getFieldWithDefault(msg, 1, ""),
    position: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    streamRevision: jspb.Message.getFieldWithDefault(msg, 3, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamSuccess}
 */
proto.kurrentdb.protocol.v2.AppendStreamSuccess.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.AppendStreamSuccess;
  return proto.kurrentdb.protocol.v2.AppendStreamSuccess.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamSuccess} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamSuccess}
 */
proto.kurrentdb.protocol.v2.AppendStreamSuccess.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStream(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setPosition(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setStreamRevision(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.AppendStreamSuccess.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.AppendStreamSuccess.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamSuccess} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.AppendStreamSuccess.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPosition();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = message.getStreamRevision();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      3,
      f
    );
  }
};


/**
 * optional string stream = 1;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.AppendStreamSuccess.prototype.getStream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamSuccess} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamSuccess.prototype.setStream = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 position = 2;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.AppendStreamSuccess.prototype.getPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamSuccess} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamSuccess.prototype.setPosition = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional int64 stream_revision = 3;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.AppendStreamSuccess.prototype.getStreamRevision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamSuccess} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamSuccess.prototype.setStreamRevision = function(value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.oneofGroups_ = [[2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.ErrorCase = {
  ERROR_NOT_SET: 0,
  STREAM_REVISION_CONFLICT: 2,
  ACCESS_DENIED: 3,
  STREAM_DELETED: 4,
  STREAM_NOT_FOUND: 5,
  TRANSACTION_MAX_SIZE_EXCEEDED: 6
};

/**
 * @return {proto.kurrentdb.protocol.v2.AppendStreamFailure.ErrorCase}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.getErrorCase = function() {
  return /** @type {proto.kurrentdb.protocol.v2.AppendStreamFailure.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.kurrentdb.protocol.v2.AppendStreamFailure.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.AppendStreamFailure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamFailure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: jspb.Message.getFieldWithDefault(msg, 1, ""),
    streamRevisionConflict: (f = msg.getStreamRevisionConflict()) && kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.StreamRevisionConflict.toObject(includeInstance, f),
    accessDenied: (f = msg.getAccessDenied()) && kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.AccessDenied.toObject(includeInstance, f),
    streamDeleted: (f = msg.getStreamDeleted()) && kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.StreamDeleted.toObject(includeInstance, f),
    streamNotFound: (f = msg.getStreamNotFound()) && kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.StreamNotFound.toObject(includeInstance, f),
    transactionMaxSizeExceeded: (f = msg.getTransactionMaxSizeExceeded()) && kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.TransactionMaxSizeExceeded.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamFailure}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.AppendStreamFailure;
  return proto.kurrentdb.protocol.v2.AppendStreamFailure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamFailure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamFailure}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStream(value);
      break;
    case 2:
      var value = new kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.StreamRevisionConflict;
      reader.readMessage(value,kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.StreamRevisionConflict.deserializeBinaryFromReader);
      msg.setStreamRevisionConflict(value);
      break;
    case 3:
      var value = new kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.AccessDenied;
      reader.readMessage(value,kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.AccessDenied.deserializeBinaryFromReader);
      msg.setAccessDenied(value);
      break;
    case 4:
      var value = new kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.StreamDeleted;
      reader.readMessage(value,kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.StreamDeleted.deserializeBinaryFromReader);
      msg.setStreamDeleted(value);
      break;
    case 5:
      var value = new kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.StreamNotFound;
      reader.readMessage(value,kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.StreamNotFound.deserializeBinaryFromReader);
      msg.setStreamNotFound(value);
      break;
    case 6:
      var value = new kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.TransactionMaxSizeExceeded;
      reader.readMessage(value,kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.TransactionMaxSizeExceeded.deserializeBinaryFromReader);
      msg.setTransactionMaxSizeExceeded(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.AppendStreamFailure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamFailure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStreamRevisionConflict();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.StreamRevisionConflict.serializeBinaryToWriter
    );
  }
  f = message.getAccessDenied();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.AccessDenied.serializeBinaryToWriter
    );
  }
  f = message.getStreamDeleted();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.StreamDeleted.serializeBinaryToWriter
    );
  }
  f = message.getStreamNotFound();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.StreamNotFound.serializeBinaryToWriter
    );
  }
  f = message.getTransactionMaxSizeExceeded();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.TransactionMaxSizeExceeded.serializeBinaryToWriter
    );
  }
};


/**
 * optional string stream = 1;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.getStream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamFailure} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.setStream = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ErrorDetails.StreamRevisionConflict stream_revision_conflict = 2;
 * @return {?proto.kurrentdb.protocol.v2.ErrorDetails.StreamRevisionConflict}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.getStreamRevisionConflict = function() {
  return /** @type{?proto.kurrentdb.protocol.v2.ErrorDetails.StreamRevisionConflict} */ (
    jspb.Message.getWrapperField(this, kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.StreamRevisionConflict, 2));
};


/**
 * @param {?proto.kurrentdb.protocol.v2.ErrorDetails.StreamRevisionConflict|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamFailure} returns this
*/
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.setStreamRevisionConflict = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.kurrentdb.protocol.v2.AppendStreamFailure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamFailure} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.clearStreamRevisionConflict = function() {
  return this.setStreamRevisionConflict(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.hasStreamRevisionConflict = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ErrorDetails.AccessDenied access_denied = 3;
 * @return {?proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.getAccessDenied = function() {
  return /** @type{?proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied} */ (
    jspb.Message.getWrapperField(this, kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.AccessDenied, 3));
};


/**
 * @param {?proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamFailure} returns this
*/
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.setAccessDenied = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.kurrentdb.protocol.v2.AppendStreamFailure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamFailure} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.clearAccessDenied = function() {
  return this.setAccessDenied(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.hasAccessDenied = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ErrorDetails.StreamDeleted stream_deleted = 4;
 * @return {?proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.getStreamDeleted = function() {
  return /** @type{?proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted} */ (
    jspb.Message.getWrapperField(this, kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.StreamDeleted, 4));
};


/**
 * @param {?proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamFailure} returns this
*/
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.setStreamDeleted = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.kurrentdb.protocol.v2.AppendStreamFailure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamFailure} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.clearStreamDeleted = function() {
  return this.setStreamDeleted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.hasStreamDeleted = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ErrorDetails.StreamNotFound stream_not_found = 5;
 * @return {?proto.kurrentdb.protocol.v2.ErrorDetails.StreamNotFound}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.getStreamNotFound = function() {
  return /** @type{?proto.kurrentdb.protocol.v2.ErrorDetails.StreamNotFound} */ (
    jspb.Message.getWrapperField(this, kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.StreamNotFound, 5));
};


/**
 * @param {?proto.kurrentdb.protocol.v2.ErrorDetails.StreamNotFound|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamFailure} returns this
*/
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.setStreamNotFound = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.kurrentdb.protocol.v2.AppendStreamFailure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamFailure} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.clearStreamNotFound = function() {
  return this.setStreamNotFound(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.hasStreamNotFound = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ErrorDetails.TransactionMaxSizeExceeded transaction_max_size_exceeded = 6;
 * @return {?proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.getTransactionMaxSizeExceeded = function() {
  return /** @type{?proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded} */ (
    jspb.Message.getWrapperField(this, kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.TransactionMaxSizeExceeded, 6));
};


/**
 * @param {?proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamFailure} returns this
*/
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.setTransactionMaxSizeExceeded = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.kurrentdb.protocol.v2.AppendStreamFailure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamFailure} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.clearTransactionMaxSizeExceeded = function() {
  return this.setTransactionMaxSizeExceeded(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.hasTransactionMaxSizeExceeded = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  SUCCESS: 1,
  FAILURE: 2
};

/**
 * @return {proto.kurrentdb.protocol.v2.AppendStreamResponse.ResultCase}
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.prototype.getResultCase = function() {
  return /** @type {proto.kurrentdb.protocol.v2.AppendStreamResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.kurrentdb.protocol.v2.AppendStreamResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.AppendStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: (f = msg.getSuccess()) && proto.kurrentdb.protocol.v2.AppendStreamSuccess.toObject(includeInstance, f),
    failure: (f = msg.getFailure()) && proto.kurrentdb.protocol.v2.AppendStreamFailure.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamResponse}
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.AppendStreamResponse;
  return proto.kurrentdb.protocol.v2.AppendStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamResponse}
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.kurrentdb.protocol.v2.AppendStreamSuccess;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.AppendStreamSuccess.deserializeBinaryFromReader);
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.kurrentdb.protocol.v2.AppendStreamFailure;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.AppendStreamFailure.deserializeBinaryFromReader);
      msg.setFailure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.AppendStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.kurrentdb.protocol.v2.AppendStreamSuccess.serializeBinaryToWriter
    );
  }
  f = message.getFailure();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.kurrentdb.protocol.v2.AppendStreamFailure.serializeBinaryToWriter
    );
  }
};


/**
 * optional AppendStreamSuccess success = 1;
 * @return {?proto.kurrentdb.protocol.v2.AppendStreamSuccess}
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.prototype.getSuccess = function() {
  return /** @type{?proto.kurrentdb.protocol.v2.AppendStreamSuccess} */ (
    jspb.Message.getWrapperField(this, proto.kurrentdb.protocol.v2.AppendStreamSuccess, 1));
};


/**
 * @param {?proto.kurrentdb.protocol.v2.AppendStreamSuccess|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamResponse} returns this
*/
proto.kurrentdb.protocol.v2.AppendStreamResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.kurrentdb.protocol.v2.AppendStreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamResponse} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.prototype.clearSuccess = function() {
  return this.setSuccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.prototype.hasSuccess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AppendStreamFailure failure = 2;
 * @return {?proto.kurrentdb.protocol.v2.AppendStreamFailure}
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.prototype.getFailure = function() {
  return /** @type{?proto.kurrentdb.protocol.v2.AppendStreamFailure} */ (
    jspb.Message.getWrapperField(this, proto.kurrentdb.protocol.v2.AppendStreamFailure, 2));
};


/**
 * @param {?proto.kurrentdb.protocol.v2.AppendStreamFailure|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamResponse} returns this
*/
proto.kurrentdb.protocol.v2.AppendStreamResponse.prototype.setFailure = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.kurrentdb.protocol.v2.AppendStreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamResponse} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.prototype.clearFailure = function() {
  return this.setFailure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.prototype.hasFailure = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.MultiStreamAppendRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputList: jspb.Message.toObjectList(msg.getInputList(),
    proto.kurrentdb.protocol.v2.AppendStreamRequest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendRequest}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.MultiStreamAppendRequest;
  return proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.MultiStreamAppendRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendRequest}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.kurrentdb.protocol.v2.AppendStreamRequest;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.AppendStreamRequest.deserializeBinaryFromReader);
      msg.addInput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.MultiStreamAppendRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.kurrentdb.protocol.v2.AppendStreamRequest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AppendStreamRequest input = 1;
 * @return {!Array<!proto.kurrentdb.protocol.v2.AppendStreamRequest>}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.prototype.getInputList = function() {
  return /** @type{!Array<!proto.kurrentdb.protocol.v2.AppendStreamRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.kurrentdb.protocol.v2.AppendStreamRequest, 1));
};


/**
 * @param {!Array<!proto.kurrentdb.protocol.v2.AppendStreamRequest>} value
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendRequest} returns this
*/
proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.prototype.setInputList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamRequest}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.prototype.addInput = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.kurrentdb.protocol.v2.AppendStreamRequest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendRequest} returns this
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.prototype.clearInputList = function() {
  return this.setInputList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  SUCCESS: 1,
  FAILURE: 2
};

/**
 * @return {proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.ResultCase}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.prototype.getResultCase = function() {
  return /** @type {proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: (f = msg.getSuccess()) && proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.toObject(includeInstance, f),
    failure: (f = msg.getFailure()) && proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.MultiStreamAppendResponse;
  return proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.deserializeBinaryFromReader);
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.deserializeBinaryFromReader);
      msg.setFailure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.serializeBinaryToWriter
    );
  }
  f = message.getFailure();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.toObject = function(includeInstance, msg) {
  var f, obj = {
    outputList: jspb.Message.toObjectList(msg.getOutputList(),
    proto.kurrentdb.protocol.v2.AppendStreamSuccess.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success;
  return proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.kurrentdb.protocol.v2.AppendStreamSuccess;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.AppendStreamSuccess.deserializeBinaryFromReader);
      msg.addOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutputList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.kurrentdb.protocol.v2.AppendStreamSuccess.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AppendStreamSuccess output = 1;
 * @return {!Array<!proto.kurrentdb.protocol.v2.AppendStreamSuccess>}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.prototype.getOutputList = function() {
  return /** @type{!Array<!proto.kurrentdb.protocol.v2.AppendStreamSuccess>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.kurrentdb.protocol.v2.AppendStreamSuccess, 1));
};


/**
 * @param {!Array<!proto.kurrentdb.protocol.v2.AppendStreamSuccess>} value
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success} returns this
*/
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.prototype.setOutputList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamSuccess=} opt_value
 * @param {number=} opt_index
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamSuccess}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.prototype.addOutput = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.kurrentdb.protocol.v2.AppendStreamSuccess, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success} returns this
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.prototype.clearOutputList = function() {
  return this.setOutputList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.toObject = function(includeInstance, msg) {
  var f, obj = {
    outputList: jspb.Message.toObjectList(msg.getOutputList(),
    proto.kurrentdb.protocol.v2.AppendStreamFailure.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure;
  return proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.kurrentdb.protocol.v2.AppendStreamFailure;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.AppendStreamFailure.deserializeBinaryFromReader);
      msg.addOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutputList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.kurrentdb.protocol.v2.AppendStreamFailure.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AppendStreamFailure output = 1;
 * @return {!Array<!proto.kurrentdb.protocol.v2.AppendStreamFailure>}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.prototype.getOutputList = function() {
  return /** @type{!Array<!proto.kurrentdb.protocol.v2.AppendStreamFailure>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.kurrentdb.protocol.v2.AppendStreamFailure, 1));
};


/**
 * @param {!Array<!proto.kurrentdb.protocol.v2.AppendStreamFailure>} value
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure} returns this
*/
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.prototype.setOutputList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamFailure=} opt_value
 * @param {number=} opt_index
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamFailure}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.prototype.addOutput = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.kurrentdb.protocol.v2.AppendStreamFailure, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure} returns this
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.prototype.clearOutputList = function() {
  return this.setOutputList([]);
};


/**
 * optional Success success = 1;
 * @return {?proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.prototype.getSuccess = function() {
  return /** @type{?proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success} */ (
    jspb.Message.getWrapperField(this, proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success, 1));
};


/**
 * @param {?proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse} returns this
*/
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse} returns this
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.prototype.clearSuccess = function() {
  return this.setSuccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.prototype.hasSuccess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Failure failure = 2;
 * @return {?proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.prototype.getFailure = function() {
  return /** @type{?proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure} */ (
    jspb.Message.getWrapperField(this, proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure, 2));
};


/**
 * @param {?proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse} returns this
*/
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.prototype.setFailure = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse} returns this
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.prototype.clearFailure = function() {
  return this.setFailure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.prototype.hasFailure = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.kurrentdb.protocol.v2.ReadFilter.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.ReadFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.ReadFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.ReadFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.ReadFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: jspb.Message.getFieldWithDefault(msg, 1, 0),
    expression: jspb.Message.getFieldWithDefault(msg, 2, ""),
    propertyNamesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.ReadFilter}
 */
proto.kurrentdb.protocol.v2.ReadFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.ReadFilter;
  return proto.kurrentdb.protocol.v2.ReadFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.ReadFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.ReadFilter}
 */
proto.kurrentdb.protocol.v2.ReadFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.kurrentdb.protocol.v2.ReadFilterScope} */ (reader.readEnum());
      msg.setScope(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpression(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addPropertyNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.ReadFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.ReadFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.ReadFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.ReadFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getExpression();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPropertyNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional ReadFilterScope scope = 1;
 * @return {!proto.kurrentdb.protocol.v2.ReadFilterScope}
 */
proto.kurrentdb.protocol.v2.ReadFilter.prototype.getScope = function() {
  return /** @type {!proto.kurrentdb.protocol.v2.ReadFilterScope} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.kurrentdb.protocol.v2.ReadFilterScope} value
 * @return {!proto.kurrentdb.protocol.v2.ReadFilter} returns this
 */
proto.kurrentdb.protocol.v2.ReadFilter.prototype.setScope = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string expression = 2;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.ReadFilter.prototype.getExpression = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.ReadFilter} returns this
 */
proto.kurrentdb.protocol.v2.ReadFilter.prototype.setExpression = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string property_names = 4;
 * @return {!Array<string>}
 */
proto.kurrentdb.protocol.v2.ReadFilter.prototype.getPropertyNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.kurrentdb.protocol.v2.ReadFilter} returns this
 */
proto.kurrentdb.protocol.v2.ReadFilter.prototype.setPropertyNamesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.kurrentdb.protocol.v2.ReadFilter} returns this
 */
proto.kurrentdb.protocol.v2.ReadFilter.prototype.addPropertyNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.kurrentdb.protocol.v2.ReadFilter} returns this
 */
proto.kurrentdb.protocol.v2.ReadFilter.prototype.clearPropertyNamesList = function() {
  return this.setPropertyNamesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.Record.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.Record.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.Record} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.Record.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    position: jspb.Message.getFieldWithDefault(msg, 5, "0"),
    data: msg.getData_asB64(),
    propertiesMap: (f = msg.getPropertiesMap()) ? f.toObject(includeInstance, proto.kurrentdb.protocol.DynamicValue.toObject) : [],
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    stream: jspb.Message.getFieldWithDefault(msg, 6, ""),
    streamRevision: jspb.Message.getFieldWithDefault(msg, 7, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.Record}
 */
proto.kurrentdb.protocol.v2.Record.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.Record;
  return proto.kurrentdb.protocol.v2.Record.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.Record} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.Record}
 */
proto.kurrentdb.protocol.v2.Record.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecordId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setPosition(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 3:
      var value = msg.getPropertiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.kurrentdb.protocol.DynamicValue.deserializeBinaryFromReader, "", new proto.kurrentdb.protocol.DynamicValue());
         });
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStream(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setStreamRevision(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.Record.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.Record.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.Record} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.Record.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPosition();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      5,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPropertiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.kurrentdb.protocol.DynamicValue.serializeBinaryToWriter);
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt64String(
      7,
      f
    );
  }
};


/**
 * optional string record_id = 1;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.Record.prototype.getRecordId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.Record} returns this
 */
proto.kurrentdb.protocol.v2.Record.prototype.setRecordId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 position = 5;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.Record.prototype.getPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.Record} returns this
 */
proto.kurrentdb.protocol.v2.Record.prototype.setPosition = function(value) {
  return jspb.Message.setProto3StringIntField(this, 5, value);
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.kurrentdb.protocol.v2.Record.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.kurrentdb.protocol.v2.Record.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.Record.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.kurrentdb.protocol.v2.Record} returns this
 */
proto.kurrentdb.protocol.v2.Record.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * map<string, kurrentdb.protocol.DynamicValue> properties = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.kurrentdb.protocol.DynamicValue>}
 */
proto.kurrentdb.protocol.v2.Record.prototype.getPropertiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.kurrentdb.protocol.DynamicValue>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.kurrentdb.protocol.DynamicValue));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.kurrentdb.protocol.v2.Record} returns this
 */
proto.kurrentdb.protocol.v2.Record.prototype.clearPropertiesMap = function() {
  this.getPropertiesMap().clear();
  return this;};


/**
 * optional google.protobuf.Timestamp timestamp = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.kurrentdb.protocol.v2.Record.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.Record} returns this
*/
proto.kurrentdb.protocol.v2.Record.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.Record} returns this
 */
proto.kurrentdb.protocol.v2.Record.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.Record.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string stream = 6;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.Record.prototype.getStream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.Record} returns this
 */
proto.kurrentdb.protocol.v2.Record.prototype.setStream = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.Record} returns this
 */
proto.kurrentdb.protocol.v2.Record.prototype.clearStream = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.Record.prototype.hasStream = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int64 stream_revision = 7;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.Record.prototype.getStreamRevision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, "0"));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.Record} returns this
 */
proto.kurrentdb.protocol.v2.Record.prototype.setStreamRevision = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.Record} returns this
 */
proto.kurrentdb.protocol.v2.Record.prototype.clearStreamRevision = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.Record.prototype.hasStreamRevision = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.kurrentdb.protocol.v2.ReadSuccess.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.ReadSuccess.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.ReadSuccess.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.ReadSuccess} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.ReadSuccess.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordsList: jspb.Message.toObjectList(msg.getRecordsList(),
    proto.kurrentdb.protocol.v2.Record.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.ReadSuccess}
 */
proto.kurrentdb.protocol.v2.ReadSuccess.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.ReadSuccess;
  return proto.kurrentdb.protocol.v2.ReadSuccess.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.ReadSuccess} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.ReadSuccess}
 */
proto.kurrentdb.protocol.v2.ReadSuccess.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.kurrentdb.protocol.v2.Record;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.Record.deserializeBinaryFromReader);
      msg.addRecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.ReadSuccess.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.ReadSuccess.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.ReadSuccess} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.ReadSuccess.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.kurrentdb.protocol.v2.Record.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Record records = 1;
 * @return {!Array<!proto.kurrentdb.protocol.v2.Record>}
 */
proto.kurrentdb.protocol.v2.ReadSuccess.prototype.getRecordsList = function() {
  return /** @type{!Array<!proto.kurrentdb.protocol.v2.Record>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.kurrentdb.protocol.v2.Record, 1));
};


/**
 * @param {!Array<!proto.kurrentdb.protocol.v2.Record>} value
 * @return {!proto.kurrentdb.protocol.v2.ReadSuccess} returns this
*/
proto.kurrentdb.protocol.v2.ReadSuccess.prototype.setRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.kurrentdb.protocol.v2.Record=} opt_value
 * @param {number=} opt_index
 * @return {!proto.kurrentdb.protocol.v2.Record}
 */
proto.kurrentdb.protocol.v2.ReadSuccess.prototype.addRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.kurrentdb.protocol.v2.Record, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.kurrentdb.protocol.v2.ReadSuccess} returns this
 */
proto.kurrentdb.protocol.v2.ReadSuccess.prototype.clearRecordsList = function() {
  return this.setRecordsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.kurrentdb.protocol.v2.ReadFailure.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.kurrentdb.protocol.v2.ReadFailure.ErrorCase = {
  ERROR_NOT_SET: 0,
  ACCESS_DENIED: 1,
  STREAM_DELETED: 2,
  STREAM_NOT_FOUND: 3
};

/**
 * @return {proto.kurrentdb.protocol.v2.ReadFailure.ErrorCase}
 */
proto.kurrentdb.protocol.v2.ReadFailure.prototype.getErrorCase = function() {
  return /** @type {proto.kurrentdb.protocol.v2.ReadFailure.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.kurrentdb.protocol.v2.ReadFailure.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.ReadFailure.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.ReadFailure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.ReadFailure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.ReadFailure.toObject = function(includeInstance, msg) {
  var f, obj = {
    accessDenied: (f = msg.getAccessDenied()) && kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.AccessDenied.toObject(includeInstance, f),
    streamDeleted: (f = msg.getStreamDeleted()) && kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.StreamDeleted.toObject(includeInstance, f),
    streamNotFound: (f = msg.getStreamNotFound()) && kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.StreamNotFound.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.ReadFailure}
 */
proto.kurrentdb.protocol.v2.ReadFailure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.ReadFailure;
  return proto.kurrentdb.protocol.v2.ReadFailure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.ReadFailure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.ReadFailure}
 */
proto.kurrentdb.protocol.v2.ReadFailure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.AccessDenied;
      reader.readMessage(value,kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.AccessDenied.deserializeBinaryFromReader);
      msg.setAccessDenied(value);
      break;
    case 2:
      var value = new kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.StreamDeleted;
      reader.readMessage(value,kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.StreamDeleted.deserializeBinaryFromReader);
      msg.setStreamDeleted(value);
      break;
    case 3:
      var value = new kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.StreamNotFound;
      reader.readMessage(value,kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.StreamNotFound.deserializeBinaryFromReader);
      msg.setStreamNotFound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.ReadFailure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.ReadFailure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.ReadFailure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.ReadFailure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccessDenied();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.AccessDenied.serializeBinaryToWriter
    );
  }
  f = message.getStreamDeleted();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.StreamDeleted.serializeBinaryToWriter
    );
  }
  f = message.getStreamNotFound();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.StreamNotFound.serializeBinaryToWriter
    );
  }
};


/**
 * optional ErrorDetails.AccessDenied access_denied = 1;
 * @return {?proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied}
 */
proto.kurrentdb.protocol.v2.ReadFailure.prototype.getAccessDenied = function() {
  return /** @type{?proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied} */ (
    jspb.Message.getWrapperField(this, kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.AccessDenied, 1));
};


/**
 * @param {?proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.ReadFailure} returns this
*/
proto.kurrentdb.protocol.v2.ReadFailure.prototype.setAccessDenied = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.kurrentdb.protocol.v2.ReadFailure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.ReadFailure} returns this
 */
proto.kurrentdb.protocol.v2.ReadFailure.prototype.clearAccessDenied = function() {
  return this.setAccessDenied(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.ReadFailure.prototype.hasAccessDenied = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ErrorDetails.StreamDeleted stream_deleted = 2;
 * @return {?proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted}
 */
proto.kurrentdb.protocol.v2.ReadFailure.prototype.getStreamDeleted = function() {
  return /** @type{?proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted} */ (
    jspb.Message.getWrapperField(this, kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.StreamDeleted, 2));
};


/**
 * @param {?proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.ReadFailure} returns this
*/
proto.kurrentdb.protocol.v2.ReadFailure.prototype.setStreamDeleted = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.kurrentdb.protocol.v2.ReadFailure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.ReadFailure} returns this
 */
proto.kurrentdb.protocol.v2.ReadFailure.prototype.clearStreamDeleted = function() {
  return this.setStreamDeleted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.ReadFailure.prototype.hasStreamDeleted = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ErrorDetails.StreamNotFound stream_not_found = 3;
 * @return {?proto.kurrentdb.protocol.v2.ErrorDetails.StreamNotFound}
 */
proto.kurrentdb.protocol.v2.ReadFailure.prototype.getStreamNotFound = function() {
  return /** @type{?proto.kurrentdb.protocol.v2.ErrorDetails.StreamNotFound} */ (
    jspb.Message.getWrapperField(this, kurrentdb_protocols_v2_streams_shared_pb.ErrorDetails.StreamNotFound, 3));
};


/**
 * @param {?proto.kurrentdb.protocol.v2.ErrorDetails.StreamNotFound|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.ReadFailure} returns this
*/
proto.kurrentdb.protocol.v2.ReadFailure.prototype.setStreamNotFound = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.kurrentdb.protocol.v2.ReadFailure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.ReadFailure} returns this
 */
proto.kurrentdb.protocol.v2.ReadFailure.prototype.clearStreamNotFound = function() {
  return this.setStreamNotFound(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.ReadFailure.prototype.hasStreamNotFound = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.ReadRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.ReadRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.ReadRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.ReadRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    filter: (f = msg.getFilter()) && proto.kurrentdb.protocol.v2.ReadFilter.toObject(includeInstance, f),
    startPosition: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    limit: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    direction: jspb.Message.getFieldWithDefault(msg, 4, 0),
    heartbeats: (f = msg.getHeartbeats()) && proto.kurrentdb.protocol.v2.HeartbeatOptions.toObject(includeInstance, f),
    batchSize: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.ReadRequest}
 */
proto.kurrentdb.protocol.v2.ReadRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.ReadRequest;
  return proto.kurrentdb.protocol.v2.ReadRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.ReadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.ReadRequest}
 */
proto.kurrentdb.protocol.v2.ReadRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.kurrentdb.protocol.v2.ReadFilter;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.ReadFilter.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setStartPosition(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setLimit(value);
      break;
    case 4:
      var value = /** @type {!proto.kurrentdb.protocol.v2.ReadDirection} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    case 5:
      var value = new proto.kurrentdb.protocol.v2.HeartbeatOptions;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.HeartbeatOptions.deserializeBinaryFromReader);
      msg.setHeartbeats(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBatchSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.ReadRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.ReadRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.ReadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.ReadRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.kurrentdb.protocol.v2.ReadFilter.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64String(
      3,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getHeartbeats();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.kurrentdb.protocol.v2.HeartbeatOptions.serializeBinaryToWriter
    );
  }
  f = message.getBatchSize();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional ReadFilter filter = 1;
 * @return {?proto.kurrentdb.protocol.v2.ReadFilter}
 */
proto.kurrentdb.protocol.v2.ReadRequest.prototype.getFilter = function() {
  return /** @type{?proto.kurrentdb.protocol.v2.ReadFilter} */ (
    jspb.Message.getWrapperField(this, proto.kurrentdb.protocol.v2.ReadFilter, 1));
};


/**
 * @param {?proto.kurrentdb.protocol.v2.ReadFilter|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.ReadRequest} returns this
*/
proto.kurrentdb.protocol.v2.ReadRequest.prototype.setFilter = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.ReadRequest} returns this
 */
proto.kurrentdb.protocol.v2.ReadRequest.prototype.clearFilter = function() {
  return this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.ReadRequest.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 start_position = 2;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.ReadRequest.prototype.getStartPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.ReadRequest} returns this
 */
proto.kurrentdb.protocol.v2.ReadRequest.prototype.setStartPosition = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.ReadRequest} returns this
 */
proto.kurrentdb.protocol.v2.ReadRequest.prototype.clearStartPosition = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.ReadRequest.prototype.hasStartPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 limit = 3;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.ReadRequest.prototype.getLimit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.ReadRequest} returns this
 */
proto.kurrentdb.protocol.v2.ReadRequest.prototype.setLimit = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.ReadRequest} returns this
 */
proto.kurrentdb.protocol.v2.ReadRequest.prototype.clearLimit = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.ReadRequest.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ReadDirection direction = 4;
 * @return {!proto.kurrentdb.protocol.v2.ReadDirection}
 */
proto.kurrentdb.protocol.v2.ReadRequest.prototype.getDirection = function() {
  return /** @type {!proto.kurrentdb.protocol.v2.ReadDirection} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.kurrentdb.protocol.v2.ReadDirection} value
 * @return {!proto.kurrentdb.protocol.v2.ReadRequest} returns this
 */
proto.kurrentdb.protocol.v2.ReadRequest.prototype.setDirection = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional HeartbeatOptions heartbeats = 5;
 * @return {?proto.kurrentdb.protocol.v2.HeartbeatOptions}
 */
proto.kurrentdb.protocol.v2.ReadRequest.prototype.getHeartbeats = function() {
  return /** @type{?proto.kurrentdb.protocol.v2.HeartbeatOptions} */ (
    jspb.Message.getWrapperField(this, proto.kurrentdb.protocol.v2.HeartbeatOptions, 5));
};


/**
 * @param {?proto.kurrentdb.protocol.v2.HeartbeatOptions|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.ReadRequest} returns this
*/
proto.kurrentdb.protocol.v2.ReadRequest.prototype.setHeartbeats = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.ReadRequest} returns this
 */
proto.kurrentdb.protocol.v2.ReadRequest.prototype.clearHeartbeats = function() {
  return this.setHeartbeats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.ReadRequest.prototype.hasHeartbeats = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 batch_size = 6;
 * @return {number}
 */
proto.kurrentdb.protocol.v2.ReadRequest.prototype.getBatchSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.kurrentdb.protocol.v2.ReadRequest} returns this
 */
proto.kurrentdb.protocol.v2.ReadRequest.prototype.setBatchSize = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.kurrentdb.protocol.v2.ReadResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.kurrentdb.protocol.v2.ReadResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  SUCCESS: 1,
  FAILURE: 2,
  HEARTBEAT: 3
};

/**
 * @return {proto.kurrentdb.protocol.v2.ReadResponse.ResultCase}
 */
proto.kurrentdb.protocol.v2.ReadResponse.prototype.getResultCase = function() {
  return /** @type {proto.kurrentdb.protocol.v2.ReadResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.kurrentdb.protocol.v2.ReadResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.ReadResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.ReadResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.ReadResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.ReadResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: (f = msg.getSuccess()) && proto.kurrentdb.protocol.v2.ReadSuccess.toObject(includeInstance, f),
    failure: (f = msg.getFailure()) && proto.kurrentdb.protocol.v2.ReadFailure.toObject(includeInstance, f),
    heartbeat: (f = msg.getHeartbeat()) && proto.kurrentdb.protocol.v2.Heartbeat.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.ReadResponse}
 */
proto.kurrentdb.protocol.v2.ReadResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.ReadResponse;
  return proto.kurrentdb.protocol.v2.ReadResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.ReadResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.ReadResponse}
 */
proto.kurrentdb.protocol.v2.ReadResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.kurrentdb.protocol.v2.ReadSuccess;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.ReadSuccess.deserializeBinaryFromReader);
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.kurrentdb.protocol.v2.ReadFailure;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.ReadFailure.deserializeBinaryFromReader);
      msg.setFailure(value);
      break;
    case 3:
      var value = new proto.kurrentdb.protocol.v2.Heartbeat;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.Heartbeat.deserializeBinaryFromReader);
      msg.setHeartbeat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.ReadResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.ReadResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.ReadResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.ReadResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.kurrentdb.protocol.v2.ReadSuccess.serializeBinaryToWriter
    );
  }
  f = message.getFailure();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.kurrentdb.protocol.v2.ReadFailure.serializeBinaryToWriter
    );
  }
  f = message.getHeartbeat();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.kurrentdb.protocol.v2.Heartbeat.serializeBinaryToWriter
    );
  }
};


/**
 * optional ReadSuccess success = 1;
 * @return {?proto.kurrentdb.protocol.v2.ReadSuccess}
 */
proto.kurrentdb.protocol.v2.ReadResponse.prototype.getSuccess = function() {
  return /** @type{?proto.kurrentdb.protocol.v2.ReadSuccess} */ (
    jspb.Message.getWrapperField(this, proto.kurrentdb.protocol.v2.ReadSuccess, 1));
};


/**
 * @param {?proto.kurrentdb.protocol.v2.ReadSuccess|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.ReadResponse} returns this
*/
proto.kurrentdb.protocol.v2.ReadResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.kurrentdb.protocol.v2.ReadResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.ReadResponse} returns this
 */
proto.kurrentdb.protocol.v2.ReadResponse.prototype.clearSuccess = function() {
  return this.setSuccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.ReadResponse.prototype.hasSuccess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ReadFailure failure = 2;
 * @return {?proto.kurrentdb.protocol.v2.ReadFailure}
 */
proto.kurrentdb.protocol.v2.ReadResponse.prototype.getFailure = function() {
  return /** @type{?proto.kurrentdb.protocol.v2.ReadFailure} */ (
    jspb.Message.getWrapperField(this, proto.kurrentdb.protocol.v2.ReadFailure, 2));
};


/**
 * @param {?proto.kurrentdb.protocol.v2.ReadFailure|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.ReadResponse} returns this
*/
proto.kurrentdb.protocol.v2.ReadResponse.prototype.setFailure = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.kurrentdb.protocol.v2.ReadResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.ReadResponse} returns this
 */
proto.kurrentdb.protocol.v2.ReadResponse.prototype.clearFailure = function() {
  return this.setFailure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.ReadResponse.prototype.hasFailure = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Heartbeat heartbeat = 3;
 * @return {?proto.kurrentdb.protocol.v2.Heartbeat}
 */
proto.kurrentdb.protocol.v2.ReadResponse.prototype.getHeartbeat = function() {
  return /** @type{?proto.kurrentdb.protocol.v2.Heartbeat} */ (
    jspb.Message.getWrapperField(this, proto.kurrentdb.protocol.v2.Heartbeat, 3));
};


/**
 * @param {?proto.kurrentdb.protocol.v2.Heartbeat|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.ReadResponse} returns this
*/
proto.kurrentdb.protocol.v2.ReadResponse.prototype.setHeartbeat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.kurrentdb.protocol.v2.ReadResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.ReadResponse} returns this
 */
proto.kurrentdb.protocol.v2.ReadResponse.prototype.clearHeartbeat = function() {
  return this.setHeartbeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.ReadResponse.prototype.hasHeartbeat = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.HeartbeatOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.HeartbeatOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.HeartbeatOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.HeartbeatOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    enable: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    period: (f = msg.getPeriod()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
    recordsThreshold: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.HeartbeatOptions}
 */
proto.kurrentdb.protocol.v2.HeartbeatOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.HeartbeatOptions;
  return proto.kurrentdb.protocol.v2.HeartbeatOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.HeartbeatOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.HeartbeatOptions}
 */
proto.kurrentdb.protocol.v2.HeartbeatOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnable(value);
      break;
    case 2:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setPeriod(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRecordsThreshold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.HeartbeatOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.HeartbeatOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.HeartbeatOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.HeartbeatOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnable();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getPeriod();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional bool enable = 1;
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.HeartbeatOptions.prototype.getEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.kurrentdb.protocol.v2.HeartbeatOptions} returns this
 */
proto.kurrentdb.protocol.v2.HeartbeatOptions.prototype.setEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional google.protobuf.Duration period = 2;
 * @return {?proto.google.protobuf.Duration}
 */
proto.kurrentdb.protocol.v2.HeartbeatOptions.prototype.getPeriod = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 2));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.HeartbeatOptions} returns this
*/
proto.kurrentdb.protocol.v2.HeartbeatOptions.prototype.setPeriod = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.HeartbeatOptions} returns this
 */
proto.kurrentdb.protocol.v2.HeartbeatOptions.prototype.clearPeriod = function() {
  return this.setPeriod(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.HeartbeatOptions.prototype.hasPeriod = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 records_threshold = 3;
 * @return {number}
 */
proto.kurrentdb.protocol.v2.HeartbeatOptions.prototype.getRecordsThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.kurrentdb.protocol.v2.HeartbeatOptions} returns this
 */
proto.kurrentdb.protocol.v2.HeartbeatOptions.prototype.setRecordsThreshold = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.HeartbeatOptions} returns this
 */
proto.kurrentdb.protocol.v2.HeartbeatOptions.prototype.clearRecordsThreshold = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.HeartbeatOptions.prototype.hasRecordsThreshold = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.Heartbeat.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.Heartbeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.Heartbeat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.Heartbeat.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    position: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.Heartbeat}
 */
proto.kurrentdb.protocol.v2.Heartbeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.Heartbeat;
  return proto.kurrentdb.protocol.v2.Heartbeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.Heartbeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.Heartbeat}
 */
proto.kurrentdb.protocol.v2.Heartbeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.kurrentdb.protocol.v2.HeartbeatType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setPosition(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.Heartbeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.Heartbeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.Heartbeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.Heartbeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPosition();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional HeartbeatType type = 1;
 * @return {!proto.kurrentdb.protocol.v2.HeartbeatType}
 */
proto.kurrentdb.protocol.v2.Heartbeat.prototype.getType = function() {
  return /** @type {!proto.kurrentdb.protocol.v2.HeartbeatType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.kurrentdb.protocol.v2.HeartbeatType} value
 * @return {!proto.kurrentdb.protocol.v2.Heartbeat} returns this
 */
proto.kurrentdb.protocol.v2.Heartbeat.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 position = 2;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.Heartbeat.prototype.getPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.Heartbeat} returns this
 */
proto.kurrentdb.protocol.v2.Heartbeat.prototype.setPosition = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.kurrentdb.protocol.v2.Heartbeat.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.Heartbeat} returns this
*/
proto.kurrentdb.protocol.v2.Heartbeat.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.Heartbeat} returns this
 */
proto.kurrentdb.protocol.v2.Heartbeat.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.Heartbeat.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.kurrentdb.protocol.v2.ExpectedRevisionConstants = {
  EXPECTED_REVISION_CONSTANTS_SINGLE_EVENT: 0,
  EXPECTED_REVISION_CONSTANTS_ANY: -2,
  EXPECTED_REVISION_CONSTANTS_NO_STREAM: -1,
  EXPECTED_REVISION_CONSTANTS_EXISTS: -4
};

/**
 * @enum {number}
 */
proto.kurrentdb.protocol.v2.ReadFilterScope = {
  READ_FILTER_SCOPE_UNSPECIFIED: 0,
  READ_FILTER_SCOPE_STREAM: 1,
  READ_FILTER_SCOPE_SCHEMA_NAME: 2,
  READ_FILTER_SCOPE_PROPERTIES: 3,
  READ_FILTER_SCOPE_RECORD: 4
};

/**
 * @enum {number}
 */
proto.kurrentdb.protocol.v2.ReadDirection = {
  READ_DIRECTION_FORWARDS: 0,
  READ_DIRECTION_BACKWARDS: 1
};

/**
 * @enum {number}
 */
proto.kurrentdb.protocol.v2.ReadPositionConstants = {
  READ_POSITION_CONSTANTS_UNSPECIFIED: 0,
  READ_POSITION_CONSTANTS_EARLIEST: 1,
  READ_POSITION_CONSTANTS_LATEST: 2
};

/**
 * @enum {number}
 */
proto.kurrentdb.protocol.v2.HeartbeatType = {
  HEARTBEAT_TYPE_UNSPECIFIED: 0,
  HEARTBEAT_TYPE_CHECKPOINT: 1,
  HEARTBEAT_TYPE_CAUGHT_UP: 2,
  HEARTBEAT_TYPE_FELL_BEHIND: 3
};

goog.object.extend(exports, proto.kurrentdb.protocol.v2);
