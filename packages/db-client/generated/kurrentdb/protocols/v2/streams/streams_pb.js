// source: kurrentdb/protocols/v2/streams/streams.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.object.extend(proto, google_protobuf_struct_pb);
goog.exportSymbol('proto.kurrentdb.protocol.v2.streams.AppendRecord', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.streams.AppendRequest', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.streams.AppendResponse', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.streams.AppendSessionResponse', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.streams.ExpectedRevisionConstants', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.streams.SchemaFormat', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.streams.SchemaInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.streams.AppendRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.kurrentdb.protocol.v2.streams.AppendRequest.repeatedFields_, null);
};
goog.inherits(proto.kurrentdb.protocol.v2.streams.AppendRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.streams.AppendRequest.displayName = 'proto.kurrentdb.protocol.v2.streams.AppendRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.streams.AppendResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kurrentdb.protocol.v2.streams.AppendResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.streams.AppendResponse.displayName = 'proto.kurrentdb.protocol.v2.streams.AppendResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.streams.AppendSessionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.kurrentdb.protocol.v2.streams.AppendSessionResponse.repeatedFields_, null);
};
goog.inherits(proto.kurrentdb.protocol.v2.streams.AppendSessionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.streams.AppendSessionResponse.displayName = 'proto.kurrentdb.protocol.v2.streams.AppendSessionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.streams.SchemaInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kurrentdb.protocol.v2.streams.SchemaInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.streams.SchemaInfo.displayName = 'proto.kurrentdb.protocol.v2.streams.SchemaInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.streams.AppendRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kurrentdb.protocol.v2.streams.AppendRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.streams.AppendRecord.displayName = 'proto.kurrentdb.protocol.v2.streams.AppendRecord';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.kurrentdb.protocol.v2.streams.AppendRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.streams.AppendRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.streams.AppendRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.streams.AppendRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.streams.AppendRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: jspb.Message.getFieldWithDefault(msg, 1, ""),
    recordsList: jspb.Message.toObjectList(msg.getRecordsList(),
    proto.kurrentdb.protocol.v2.streams.AppendRecord.toObject, includeInstance),
    expectedRevision: jspb.Message.getFieldWithDefault(msg, 3, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.streams.AppendRequest}
 */
proto.kurrentdb.protocol.v2.streams.AppendRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.streams.AppendRequest;
  return proto.kurrentdb.protocol.v2.streams.AppendRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.streams.AppendRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.streams.AppendRequest}
 */
proto.kurrentdb.protocol.v2.streams.AppendRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStream(value);
      break;
    case 2:
      var value = new proto.kurrentdb.protocol.v2.streams.AppendRecord;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.streams.AppendRecord.deserializeBinaryFromReader);
      msg.addRecords(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readSint64String());
      msg.setExpectedRevision(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.streams.AppendRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.streams.AppendRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.streams.AppendRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.streams.AppendRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.kurrentdb.protocol.v2.streams.AppendRecord.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeSint64String(
      3,
      f
    );
  }
};


/**
 * optional string stream = 1;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.streams.AppendRequest.prototype.getStream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.streams.AppendRequest} returns this
 */
proto.kurrentdb.protocol.v2.streams.AppendRequest.prototype.setStream = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated AppendRecord records = 2;
 * @return {!Array<!proto.kurrentdb.protocol.v2.streams.AppendRecord>}
 */
proto.kurrentdb.protocol.v2.streams.AppendRequest.prototype.getRecordsList = function() {
  return /** @type{!Array<!proto.kurrentdb.protocol.v2.streams.AppendRecord>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.kurrentdb.protocol.v2.streams.AppendRecord, 2));
};


/**
 * @param {!Array<!proto.kurrentdb.protocol.v2.streams.AppendRecord>} value
 * @return {!proto.kurrentdb.protocol.v2.streams.AppendRequest} returns this
*/
proto.kurrentdb.protocol.v2.streams.AppendRequest.prototype.setRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.kurrentdb.protocol.v2.streams.AppendRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.kurrentdb.protocol.v2.streams.AppendRecord}
 */
proto.kurrentdb.protocol.v2.streams.AppendRequest.prototype.addRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.kurrentdb.protocol.v2.streams.AppendRecord, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.kurrentdb.protocol.v2.streams.AppendRequest} returns this
 */
proto.kurrentdb.protocol.v2.streams.AppendRequest.prototype.clearRecordsList = function() {
  return this.setRecordsList([]);
};


/**
 * optional sint64 expected_revision = 3;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.streams.AppendRequest.prototype.getExpectedRevision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.streams.AppendRequest} returns this
 */
proto.kurrentdb.protocol.v2.streams.AppendRequest.prototype.setExpectedRevision = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.streams.AppendRequest} returns this
 */
proto.kurrentdb.protocol.v2.streams.AppendRequest.prototype.clearExpectedRevision = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.streams.AppendRequest.prototype.hasExpectedRevision = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.streams.AppendResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.streams.AppendResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.streams.AppendResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.streams.AppendResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: jspb.Message.getFieldWithDefault(msg, 1, ""),
    streamRevision: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    position: jspb.Message.getFieldWithDefault(msg, 3, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.streams.AppendResponse}
 */
proto.kurrentdb.protocol.v2.streams.AppendResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.streams.AppendResponse;
  return proto.kurrentdb.protocol.v2.streams.AppendResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.streams.AppendResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.streams.AppendResponse}
 */
proto.kurrentdb.protocol.v2.streams.AppendResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStream(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readSint64String());
      msg.setStreamRevision(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readSint64String());
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.streams.AppendResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.streams.AppendResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.streams.AppendResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.streams.AppendResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStreamRevision();
  if (parseInt(f, 10) !== 0) {
    writer.writeSint64String(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeSint64String(
      3,
      f
    );
  }
};


/**
 * optional string stream = 1;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.streams.AppendResponse.prototype.getStream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.streams.AppendResponse} returns this
 */
proto.kurrentdb.protocol.v2.streams.AppendResponse.prototype.setStream = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional sint64 stream_revision = 2;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.streams.AppendResponse.prototype.getStreamRevision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.streams.AppendResponse} returns this
 */
proto.kurrentdb.protocol.v2.streams.AppendResponse.prototype.setStreamRevision = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional sint64 position = 3;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.streams.AppendResponse.prototype.getPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.streams.AppendResponse} returns this
 */
proto.kurrentdb.protocol.v2.streams.AppendResponse.prototype.setPosition = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.streams.AppendResponse} returns this
 */
proto.kurrentdb.protocol.v2.streams.AppendResponse.prototype.clearPosition = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.streams.AppendResponse.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.kurrentdb.protocol.v2.streams.AppendSessionResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.streams.AppendSessionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.streams.AppendSessionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.streams.AppendSessionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.streams.AppendSessionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    outputList: jspb.Message.toObjectList(msg.getOutputList(),
    proto.kurrentdb.protocol.v2.streams.AppendResponse.toObject, includeInstance),
    position: jspb.Message.getFieldWithDefault(msg, 2, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.streams.AppendSessionResponse}
 */
proto.kurrentdb.protocol.v2.streams.AppendSessionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.streams.AppendSessionResponse;
  return proto.kurrentdb.protocol.v2.streams.AppendSessionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.streams.AppendSessionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.streams.AppendSessionResponse}
 */
proto.kurrentdb.protocol.v2.streams.AppendSessionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.kurrentdb.protocol.v2.streams.AppendResponse;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.streams.AppendResponse.deserializeBinaryFromReader);
      msg.addOutput(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readSint64String());
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.streams.AppendSessionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.streams.AppendSessionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.streams.AppendSessionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.streams.AppendSessionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutputList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.kurrentdb.protocol.v2.streams.AppendResponse.serializeBinaryToWriter
    );
  }
  f = message.getPosition();
  if (parseInt(f, 10) !== 0) {
    writer.writeSint64String(
      2,
      f
    );
  }
};


/**
 * repeated AppendResponse output = 1;
 * @return {!Array<!proto.kurrentdb.protocol.v2.streams.AppendResponse>}
 */
proto.kurrentdb.protocol.v2.streams.AppendSessionResponse.prototype.getOutputList = function() {
  return /** @type{!Array<!proto.kurrentdb.protocol.v2.streams.AppendResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.kurrentdb.protocol.v2.streams.AppendResponse, 1));
};


/**
 * @param {!Array<!proto.kurrentdb.protocol.v2.streams.AppendResponse>} value
 * @return {!proto.kurrentdb.protocol.v2.streams.AppendSessionResponse} returns this
*/
proto.kurrentdb.protocol.v2.streams.AppendSessionResponse.prototype.setOutputList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.kurrentdb.protocol.v2.streams.AppendResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.kurrentdb.protocol.v2.streams.AppendResponse}
 */
proto.kurrentdb.protocol.v2.streams.AppendSessionResponse.prototype.addOutput = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.kurrentdb.protocol.v2.streams.AppendResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.kurrentdb.protocol.v2.streams.AppendSessionResponse} returns this
 */
proto.kurrentdb.protocol.v2.streams.AppendSessionResponse.prototype.clearOutputList = function() {
  return this.setOutputList([]);
};


/**
 * optional sint64 position = 2;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.streams.AppendSessionResponse.prototype.getPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.streams.AppendSessionResponse} returns this
 */
proto.kurrentdb.protocol.v2.streams.AppendSessionResponse.prototype.setPosition = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.streams.SchemaInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.streams.SchemaInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.streams.SchemaInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.streams.SchemaInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    format: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    id: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.streams.SchemaInfo}
 */
proto.kurrentdb.protocol.v2.streams.SchemaInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.streams.SchemaInfo;
  return proto.kurrentdb.protocol.v2.streams.SchemaInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.streams.SchemaInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.streams.SchemaInfo}
 */
proto.kurrentdb.protocol.v2.streams.SchemaInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.kurrentdb.protocol.v2.streams.SchemaFormat} */ (reader.readEnum());
      msg.setFormat(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.streams.SchemaInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.streams.SchemaInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.streams.SchemaInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.streams.SchemaInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFormat();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional SchemaFormat format = 1;
 * @return {!proto.kurrentdb.protocol.v2.streams.SchemaFormat}
 */
proto.kurrentdb.protocol.v2.streams.SchemaInfo.prototype.getFormat = function() {
  return /** @type {!proto.kurrentdb.protocol.v2.streams.SchemaFormat} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.kurrentdb.protocol.v2.streams.SchemaFormat} value
 * @return {!proto.kurrentdb.protocol.v2.streams.SchemaInfo} returns this
 */
proto.kurrentdb.protocol.v2.streams.SchemaInfo.prototype.setFormat = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.streams.SchemaInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.streams.SchemaInfo} returns this
 */
proto.kurrentdb.protocol.v2.streams.SchemaInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string id = 3;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.streams.SchemaInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.streams.SchemaInfo} returns this
 */
proto.kurrentdb.protocol.v2.streams.SchemaInfo.prototype.setId = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.streams.SchemaInfo} returns this
 */
proto.kurrentdb.protocol.v2.streams.SchemaInfo.prototype.clearId = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.streams.SchemaInfo.prototype.hasId = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.streams.AppendRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.streams.AppendRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.streams.AppendRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.streams.AppendRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    propertiesMap: (f = msg.getPropertiesMap()) ? f.toObject(includeInstance, proto.google.protobuf.Value.toObject) : [],
    schema: (f = msg.getSchema()) && proto.kurrentdb.protocol.v2.streams.SchemaInfo.toObject(includeInstance, f),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.streams.AppendRecord}
 */
proto.kurrentdb.protocol.v2.streams.AppendRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.streams.AppendRecord;
  return proto.kurrentdb.protocol.v2.streams.AppendRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.streams.AppendRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.streams.AppendRecord}
 */
proto.kurrentdb.protocol.v2.streams.AppendRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecordId(value);
      break;
    case 2:
      var value = msg.getPropertiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.google.protobuf.Value.deserializeBinaryFromReader, "", new proto.google.protobuf.Value());
         });
      break;
    case 3:
      var value = new proto.kurrentdb.protocol.v2.streams.SchemaInfo;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.streams.SchemaInfo.deserializeBinaryFromReader);
      msg.setSchema(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.streams.AppendRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.streams.AppendRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.streams.AppendRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.streams.AppendRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPropertiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.google.protobuf.Value.serializeBinaryToWriter);
  }
  f = message.getSchema();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.kurrentdb.protocol.v2.streams.SchemaInfo.serializeBinaryToWriter
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional string record_id = 1;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.streams.AppendRecord.prototype.getRecordId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.streams.AppendRecord} returns this
 */
proto.kurrentdb.protocol.v2.streams.AppendRecord.prototype.setRecordId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.streams.AppendRecord} returns this
 */
proto.kurrentdb.protocol.v2.streams.AppendRecord.prototype.clearRecordId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.streams.AppendRecord.prototype.hasRecordId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<string, google.protobuf.Value> properties = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.google.protobuf.Value>}
 */
proto.kurrentdb.protocol.v2.streams.AppendRecord.prototype.getPropertiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.google.protobuf.Value>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.google.protobuf.Value));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.kurrentdb.protocol.v2.streams.AppendRecord} returns this
 */
proto.kurrentdb.protocol.v2.streams.AppendRecord.prototype.clearPropertiesMap = function() {
  this.getPropertiesMap().clear();
  return this;};


/**
 * optional SchemaInfo schema = 3;
 * @return {?proto.kurrentdb.protocol.v2.streams.SchemaInfo}
 */
proto.kurrentdb.protocol.v2.streams.AppendRecord.prototype.getSchema = function() {
  return /** @type{?proto.kurrentdb.protocol.v2.streams.SchemaInfo} */ (
    jspb.Message.getWrapperField(this, proto.kurrentdb.protocol.v2.streams.SchemaInfo, 3));
};


/**
 * @param {?proto.kurrentdb.protocol.v2.streams.SchemaInfo|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.streams.AppendRecord} returns this
*/
proto.kurrentdb.protocol.v2.streams.AppendRecord.prototype.setSchema = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.streams.AppendRecord} returns this
 */
proto.kurrentdb.protocol.v2.streams.AppendRecord.prototype.clearSchema = function() {
  return this.setSchema(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.streams.AppendRecord.prototype.hasSchema = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes data = 4;
 * @return {!(string|Uint8Array)}
 */
proto.kurrentdb.protocol.v2.streams.AppendRecord.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes data = 4;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.kurrentdb.protocol.v2.streams.AppendRecord.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.streams.AppendRecord.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.kurrentdb.protocol.v2.streams.AppendRecord} returns this
 */
proto.kurrentdb.protocol.v2.streams.AppendRecord.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.kurrentdb.protocol.v2.streams.SchemaFormat = {
  SCHEMA_FORMAT_UNSPECIFIED: 0,
  SCHEMA_FORMAT_JSON: 1,
  SCHEMA_FORMAT_PROTOBUF: 2,
  SCHEMA_FORMAT_AVRO: 3,
  SCHEMA_FORMAT_BYTES: 4
};

/**
 * @enum {number}
 */
proto.kurrentdb.protocol.v2.streams.ExpectedRevisionConstants = {
  EXPECTED_REVISION_CONSTANTS_SINGLE_EVENT: 0,
  EXPECTED_REVISION_CONSTANTS_NO_STREAM: -1,
  EXPECTED_REVISION_CONSTANTS_ANY: -2,
  EXPECTED_REVISION_CONSTANTS_EXISTS: -4
};

goog.object.extend(exports, proto.kurrentdb.protocol.v2.streams);
