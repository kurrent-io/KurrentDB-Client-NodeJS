// source: streams.v2.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var dynamic$value_pb = require('./dynamic-value_pb.js');
goog.object.extend(proto, dynamic$value_pb);
goog.exportSymbol('proto.kurrentdb.protocol.v2.AppendRecord', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.AppendStreamFailure', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.AppendStreamFailure.ErrorCase', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.AppendStreamRequest', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.AppendStreamResponse', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.AppendStreamResponse.ResultCase', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.AppendStreamSuccess', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.ErrorDetails', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.ExpectedRevisionConstants', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.MultiStreamAppendRequest', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.MultiStreamAppendResponse', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.ResultCase', null, global);
goog.exportSymbol('proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.AppendRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kurrentdb.protocol.v2.AppendRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.AppendRecord.displayName = 'proto.kurrentdb.protocol.v2.AppendRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.kurrentdb.protocol.v2.AppendStreamRequest.repeatedFields_, null);
};
goog.inherits(proto.kurrentdb.protocol.v2.AppendStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.AppendStreamRequest.displayName = 'proto.kurrentdb.protocol.v2.AppendStreamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.AppendStreamSuccess = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kurrentdb.protocol.v2.AppendStreamSuccess, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.AppendStreamSuccess.displayName = 'proto.kurrentdb.protocol.v2.AppendStreamSuccess';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.kurrentdb.protocol.v2.AppendStreamFailure.oneofGroups_);
};
goog.inherits(proto.kurrentdb.protocol.v2.AppendStreamFailure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.AppendStreamFailure.displayName = 'proto.kurrentdb.protocol.v2.AppendStreamFailure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.kurrentdb.protocol.v2.AppendStreamResponse.oneofGroups_);
};
goog.inherits(proto.kurrentdb.protocol.v2.AppendStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.AppendStreamResponse.displayName = 'proto.kurrentdb.protocol.v2.AppendStreamResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.repeatedFields_, null);
};
goog.inherits(proto.kurrentdb.protocol.v2.MultiStreamAppendRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.displayName = 'proto.kurrentdb.protocol.v2.MultiStreamAppendRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.oneofGroups_);
};
goog.inherits(proto.kurrentdb.protocol.v2.MultiStreamAppendResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.displayName = 'proto.kurrentdb.protocol.v2.MultiStreamAppendResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.repeatedFields_, null);
};
goog.inherits(proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.displayName = 'proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.repeatedFields_, null);
};
goog.inherits(proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.displayName = 'proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.ErrorDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kurrentdb.protocol.v2.ErrorDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.ErrorDetails.displayName = 'proto.kurrentdb.protocol.v2.ErrorDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied.displayName = 'proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted.displayName = 'proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision.displayName = 'proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded.displayName = 'proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.AppendRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.AppendRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.AppendRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.AppendRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    propertiesMap: (f = msg.getPropertiesMap()) ? f.toObject(includeInstance, proto.kurrentdb.protobuf.DynamicValue.toObject) : [],
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.AppendRecord}
 */
proto.kurrentdb.protocol.v2.AppendRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.AppendRecord;
  return proto.kurrentdb.protocol.v2.AppendRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.AppendRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.AppendRecord}
 */
proto.kurrentdb.protocol.v2.AppendRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecordId(value);
      break;
    case 2:
      var value = msg.getPropertiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.kurrentdb.protobuf.DynamicValue.deserializeBinaryFromReader, "", new proto.kurrentdb.protobuf.DynamicValue());
         });
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.AppendRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.AppendRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.AppendRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.AppendRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPropertiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.kurrentdb.protobuf.DynamicValue.serializeBinaryToWriter);
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string record_id = 1;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.AppendRecord.prototype.getRecordId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.AppendRecord} returns this
 */
proto.kurrentdb.protocol.v2.AppendRecord.prototype.setRecordId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.AppendRecord} returns this
 */
proto.kurrentdb.protocol.v2.AppendRecord.prototype.clearRecordId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.AppendRecord.prototype.hasRecordId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<string, kurrentdb.protobuf.DynamicValue> properties = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.kurrentdb.protobuf.DynamicValue>}
 */
proto.kurrentdb.protocol.v2.AppendRecord.prototype.getPropertiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.kurrentdb.protobuf.DynamicValue>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.kurrentdb.protobuf.DynamicValue));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.kurrentdb.protocol.v2.AppendRecord} returns this
 */
proto.kurrentdb.protocol.v2.AppendRecord.prototype.clearPropertiesMap = function() {
  this.getPropertiesMap().clear();
  return this;};


/**
 * optional bytes data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.kurrentdb.protocol.v2.AppendRecord.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.kurrentdb.protocol.v2.AppendRecord.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.AppendRecord.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.kurrentdb.protocol.v2.AppendRecord} returns this
 */
proto.kurrentdb.protocol.v2.AppendRecord.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.AppendStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: jspb.Message.getFieldWithDefault(msg, 1, ""),
    recordsList: jspb.Message.toObjectList(msg.getRecordsList(),
    proto.kurrentdb.protocol.v2.AppendRecord.toObject, includeInstance),
    expectedRevision: jspb.Message.getFieldWithDefault(msg, 3, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamRequest}
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.AppendStreamRequest;
  return proto.kurrentdb.protocol.v2.AppendStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamRequest}
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStream(value);
      break;
    case 2:
      var value = new proto.kurrentdb.protocol.v2.AppendRecord;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.AppendRecord.deserializeBinaryFromReader);
      msg.addRecords(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readSint64String());
      msg.setExpectedRevision(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.AppendStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.kurrentdb.protocol.v2.AppendRecord.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeSint64String(
      3,
      f
    );
  }
};


/**
 * optional string stream = 1;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.prototype.getStream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamRequest} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.prototype.setStream = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated AppendRecord records = 2;
 * @return {!Array<!proto.kurrentdb.protocol.v2.AppendRecord>}
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.prototype.getRecordsList = function() {
  return /** @type{!Array<!proto.kurrentdb.protocol.v2.AppendRecord>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.kurrentdb.protocol.v2.AppendRecord, 2));
};


/**
 * @param {!Array<!proto.kurrentdb.protocol.v2.AppendRecord>} value
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamRequest} returns this
*/
proto.kurrentdb.protocol.v2.AppendStreamRequest.prototype.setRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.kurrentdb.protocol.v2.AppendRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.kurrentdb.protocol.v2.AppendRecord}
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.prototype.addRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.kurrentdb.protocol.v2.AppendRecord, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamRequest} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.prototype.clearRecordsList = function() {
  return this.setRecordsList([]);
};


/**
 * optional sint64 expected_revision = 3;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.prototype.getExpectedRevision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamRequest} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.prototype.setExpectedRevision = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamRequest} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.prototype.clearExpectedRevision = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.AppendStreamRequest.prototype.hasExpectedRevision = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.AppendStreamSuccess.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.AppendStreamSuccess.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamSuccess} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.AppendStreamSuccess.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: jspb.Message.getFieldWithDefault(msg, 1, ""),
    position: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    streamRevision: jspb.Message.getFieldWithDefault(msg, 3, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamSuccess}
 */
proto.kurrentdb.protocol.v2.AppendStreamSuccess.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.AppendStreamSuccess;
  return proto.kurrentdb.protocol.v2.AppendStreamSuccess.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamSuccess} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamSuccess}
 */
proto.kurrentdb.protocol.v2.AppendStreamSuccess.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStream(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setPosition(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setStreamRevision(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.AppendStreamSuccess.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.AppendStreamSuccess.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamSuccess} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.AppendStreamSuccess.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPosition();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = message.getStreamRevision();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      3,
      f
    );
  }
};


/**
 * optional string stream = 1;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.AppendStreamSuccess.prototype.getStream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamSuccess} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamSuccess.prototype.setStream = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 position = 2;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.AppendStreamSuccess.prototype.getPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamSuccess} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamSuccess.prototype.setPosition = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional int64 stream_revision = 3;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.AppendStreamSuccess.prototype.getStreamRevision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamSuccess} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamSuccess.prototype.setStreamRevision = function(value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.ErrorCase = {
  ERROR_NOT_SET: 0,
  WRONG_EXPECTED_REVISION: 2,
  ACCESS_DENIED: 3,
  STREAM_DELETED: 4,
  TRANSACTION_MAX_SIZE_EXCEEDED: 5
};

/**
 * @return {proto.kurrentdb.protocol.v2.AppendStreamFailure.ErrorCase}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.getErrorCase = function() {
  return /** @type {proto.kurrentdb.protocol.v2.AppendStreamFailure.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.kurrentdb.protocol.v2.AppendStreamFailure.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.AppendStreamFailure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamFailure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: jspb.Message.getFieldWithDefault(msg, 1, ""),
    wrongExpectedRevision: (f = msg.getWrongExpectedRevision()) && proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision.toObject(includeInstance, f),
    accessDenied: (f = msg.getAccessDenied()) && proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied.toObject(includeInstance, f),
    streamDeleted: (f = msg.getStreamDeleted()) && proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted.toObject(includeInstance, f),
    transactionMaxSizeExceeded: (f = msg.getTransactionMaxSizeExceeded()) && proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamFailure}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.AppendStreamFailure;
  return proto.kurrentdb.protocol.v2.AppendStreamFailure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamFailure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamFailure}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStream(value);
      break;
    case 2:
      var value = new proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision.deserializeBinaryFromReader);
      msg.setWrongExpectedRevision(value);
      break;
    case 3:
      var value = new proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied.deserializeBinaryFromReader);
      msg.setAccessDenied(value);
      break;
    case 4:
      var value = new proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted.deserializeBinaryFromReader);
      msg.setStreamDeleted(value);
      break;
    case 5:
      var value = new proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded.deserializeBinaryFromReader);
      msg.setTransactionMaxSizeExceeded(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.AppendStreamFailure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamFailure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWrongExpectedRevision();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision.serializeBinaryToWriter
    );
  }
  f = message.getAccessDenied();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied.serializeBinaryToWriter
    );
  }
  f = message.getStreamDeleted();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted.serializeBinaryToWriter
    );
  }
  f = message.getTransactionMaxSizeExceeded();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded.serializeBinaryToWriter
    );
  }
};


/**
 * optional string stream = 1;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.getStream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamFailure} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.setStream = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ErrorDetails.WrongExpectedRevision wrong_expected_revision = 2;
 * @return {?proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.getWrongExpectedRevision = function() {
  return /** @type{?proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision} */ (
    jspb.Message.getWrapperField(this, proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision, 2));
};


/**
 * @param {?proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamFailure} returns this
*/
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.setWrongExpectedRevision = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.kurrentdb.protocol.v2.AppendStreamFailure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamFailure} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.clearWrongExpectedRevision = function() {
  return this.setWrongExpectedRevision(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.hasWrongExpectedRevision = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ErrorDetails.AccessDenied access_denied = 3;
 * @return {?proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.getAccessDenied = function() {
  return /** @type{?proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied} */ (
    jspb.Message.getWrapperField(this, proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied, 3));
};


/**
 * @param {?proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamFailure} returns this
*/
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.setAccessDenied = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.kurrentdb.protocol.v2.AppendStreamFailure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamFailure} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.clearAccessDenied = function() {
  return this.setAccessDenied(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.hasAccessDenied = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ErrorDetails.StreamDeleted stream_deleted = 4;
 * @return {?proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.getStreamDeleted = function() {
  return /** @type{?proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted} */ (
    jspb.Message.getWrapperField(this, proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted, 4));
};


/**
 * @param {?proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamFailure} returns this
*/
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.setStreamDeleted = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.kurrentdb.protocol.v2.AppendStreamFailure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamFailure} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.clearStreamDeleted = function() {
  return this.setStreamDeleted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.hasStreamDeleted = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ErrorDetails.TransactionMaxSizeExceeded transaction_max_size_exceeded = 5;
 * @return {?proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.getTransactionMaxSizeExceeded = function() {
  return /** @type{?proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded} */ (
    jspb.Message.getWrapperField(this, proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded, 5));
};


/**
 * @param {?proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamFailure} returns this
*/
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.setTransactionMaxSizeExceeded = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.kurrentdb.protocol.v2.AppendStreamFailure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamFailure} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.clearTransactionMaxSizeExceeded = function() {
  return this.setTransactionMaxSizeExceeded(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.AppendStreamFailure.prototype.hasTransactionMaxSizeExceeded = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  SUCCESS: 1,
  FAILURE: 2
};

/**
 * @return {proto.kurrentdb.protocol.v2.AppendStreamResponse.ResultCase}
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.prototype.getResultCase = function() {
  return /** @type {proto.kurrentdb.protocol.v2.AppendStreamResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.kurrentdb.protocol.v2.AppendStreamResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.AppendStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: (f = msg.getSuccess()) && proto.kurrentdb.protocol.v2.AppendStreamSuccess.toObject(includeInstance, f),
    failure: (f = msg.getFailure()) && proto.kurrentdb.protocol.v2.AppendStreamFailure.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamResponse}
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.AppendStreamResponse;
  return proto.kurrentdb.protocol.v2.AppendStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamResponse}
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.kurrentdb.protocol.v2.AppendStreamSuccess;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.AppendStreamSuccess.deserializeBinaryFromReader);
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.kurrentdb.protocol.v2.AppendStreamFailure;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.AppendStreamFailure.deserializeBinaryFromReader);
      msg.setFailure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.AppendStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.kurrentdb.protocol.v2.AppendStreamSuccess.serializeBinaryToWriter
    );
  }
  f = message.getFailure();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.kurrentdb.protocol.v2.AppendStreamFailure.serializeBinaryToWriter
    );
  }
};


/**
 * optional AppendStreamSuccess success = 1;
 * @return {?proto.kurrentdb.protocol.v2.AppendStreamSuccess}
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.prototype.getSuccess = function() {
  return /** @type{?proto.kurrentdb.protocol.v2.AppendStreamSuccess} */ (
    jspb.Message.getWrapperField(this, proto.kurrentdb.protocol.v2.AppendStreamSuccess, 1));
};


/**
 * @param {?proto.kurrentdb.protocol.v2.AppendStreamSuccess|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamResponse} returns this
*/
proto.kurrentdb.protocol.v2.AppendStreamResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.kurrentdb.protocol.v2.AppendStreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamResponse} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.prototype.clearSuccess = function() {
  return this.setSuccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.prototype.hasSuccess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AppendStreamFailure failure = 2;
 * @return {?proto.kurrentdb.protocol.v2.AppendStreamFailure}
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.prototype.getFailure = function() {
  return /** @type{?proto.kurrentdb.protocol.v2.AppendStreamFailure} */ (
    jspb.Message.getWrapperField(this, proto.kurrentdb.protocol.v2.AppendStreamFailure, 2));
};


/**
 * @param {?proto.kurrentdb.protocol.v2.AppendStreamFailure|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamResponse} returns this
*/
proto.kurrentdb.protocol.v2.AppendStreamResponse.prototype.setFailure = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.kurrentdb.protocol.v2.AppendStreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamResponse} returns this
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.prototype.clearFailure = function() {
  return this.setFailure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.AppendStreamResponse.prototype.hasFailure = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.MultiStreamAppendRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputList: jspb.Message.toObjectList(msg.getInputList(),
    proto.kurrentdb.protocol.v2.AppendStreamRequest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendRequest}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.MultiStreamAppendRequest;
  return proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.MultiStreamAppendRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendRequest}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.kurrentdb.protocol.v2.AppendStreamRequest;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.AppendStreamRequest.deserializeBinaryFromReader);
      msg.addInput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.MultiStreamAppendRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.kurrentdb.protocol.v2.AppendStreamRequest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AppendStreamRequest input = 1;
 * @return {!Array<!proto.kurrentdb.protocol.v2.AppendStreamRequest>}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.prototype.getInputList = function() {
  return /** @type{!Array<!proto.kurrentdb.protocol.v2.AppendStreamRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.kurrentdb.protocol.v2.AppendStreamRequest, 1));
};


/**
 * @param {!Array<!proto.kurrentdb.protocol.v2.AppendStreamRequest>} value
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendRequest} returns this
*/
proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.prototype.setInputList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamRequest}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.prototype.addInput = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.kurrentdb.protocol.v2.AppendStreamRequest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendRequest} returns this
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendRequest.prototype.clearInputList = function() {
  return this.setInputList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  SUCCESS: 1,
  FAILURE: 2
};

/**
 * @return {proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.ResultCase}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.prototype.getResultCase = function() {
  return /** @type {proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: (f = msg.getSuccess()) && proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.toObject(includeInstance, f),
    failure: (f = msg.getFailure()) && proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.MultiStreamAppendResponse;
  return proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.deserializeBinaryFromReader);
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.deserializeBinaryFromReader);
      msg.setFailure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.serializeBinaryToWriter
    );
  }
  f = message.getFailure();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.toObject = function(includeInstance, msg) {
  var f, obj = {
    outputList: jspb.Message.toObjectList(msg.getOutputList(),
    proto.kurrentdb.protocol.v2.AppendStreamSuccess.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success;
  return proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.kurrentdb.protocol.v2.AppendStreamSuccess;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.AppendStreamSuccess.deserializeBinaryFromReader);
      msg.addOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutputList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.kurrentdb.protocol.v2.AppendStreamSuccess.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AppendStreamSuccess output = 1;
 * @return {!Array<!proto.kurrentdb.protocol.v2.AppendStreamSuccess>}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.prototype.getOutputList = function() {
  return /** @type{!Array<!proto.kurrentdb.protocol.v2.AppendStreamSuccess>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.kurrentdb.protocol.v2.AppendStreamSuccess, 1));
};


/**
 * @param {!Array<!proto.kurrentdb.protocol.v2.AppendStreamSuccess>} value
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success} returns this
*/
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.prototype.setOutputList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamSuccess=} opt_value
 * @param {number=} opt_index
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamSuccess}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.prototype.addOutput = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.kurrentdb.protocol.v2.AppendStreamSuccess, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success} returns this
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.prototype.clearOutputList = function() {
  return this.setOutputList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.toObject = function(includeInstance, msg) {
  var f, obj = {
    outputList: jspb.Message.toObjectList(msg.getOutputList(),
    proto.kurrentdb.protocol.v2.AppendStreamFailure.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure;
  return proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.kurrentdb.protocol.v2.AppendStreamFailure;
      reader.readMessage(value,proto.kurrentdb.protocol.v2.AppendStreamFailure.deserializeBinaryFromReader);
      msg.addOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutputList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.kurrentdb.protocol.v2.AppendStreamFailure.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AppendStreamFailure output = 1;
 * @return {!Array<!proto.kurrentdb.protocol.v2.AppendStreamFailure>}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.prototype.getOutputList = function() {
  return /** @type{!Array<!proto.kurrentdb.protocol.v2.AppendStreamFailure>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.kurrentdb.protocol.v2.AppendStreamFailure, 1));
};


/**
 * @param {!Array<!proto.kurrentdb.protocol.v2.AppendStreamFailure>} value
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure} returns this
*/
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.prototype.setOutputList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.kurrentdb.protocol.v2.AppendStreamFailure=} opt_value
 * @param {number=} opt_index
 * @return {!proto.kurrentdb.protocol.v2.AppendStreamFailure}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.prototype.addOutput = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.kurrentdb.protocol.v2.AppendStreamFailure, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure} returns this
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.prototype.clearOutputList = function() {
  return this.setOutputList([]);
};


/**
 * optional Success success = 1;
 * @return {?proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.prototype.getSuccess = function() {
  return /** @type{?proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success} */ (
    jspb.Message.getWrapperField(this, proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success, 1));
};


/**
 * @param {?proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Success|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse} returns this
*/
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse} returns this
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.prototype.clearSuccess = function() {
  return this.setSuccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.prototype.hasSuccess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Failure failure = 2;
 * @return {?proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.prototype.getFailure = function() {
  return /** @type{?proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure} */ (
    jspb.Message.getWrapperField(this, proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure, 2));
};


/**
 * @param {?proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure|undefined} value
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse} returns this
*/
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.prototype.setFailure = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kurrentdb.protocol.v2.MultiStreamAppendResponse} returns this
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.prototype.clearFailure = function() {
  return this.setFailure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kurrentdb.protocol.v2.MultiStreamAppendResponse.prototype.hasFailure = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.ErrorDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.ErrorDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.ErrorDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.ErrorDetails.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.ErrorDetails}
 */
proto.kurrentdb.protocol.v2.ErrorDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.ErrorDetails;
  return proto.kurrentdb.protocol.v2.ErrorDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.ErrorDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.ErrorDetails}
 */
proto.kurrentdb.protocol.v2.ErrorDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.ErrorDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.ErrorDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.ErrorDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.ErrorDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied.toObject = function(includeInstance, msg) {
  var f, obj = {
    reason: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied}
 */
proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied;
  return proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied}
 */
proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string reason = 1;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied} returns this
 */
proto.kurrentdb.protocol.v2.ErrorDetails.AccessDenied.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted}
 */
proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted;
  return proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted}
 */
proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.ErrorDetails.StreamDeleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamRevision: jspb.Message.getFieldWithDefault(msg, 1, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision}
 */
proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision;
  return proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision}
 */
proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setStreamRevision(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamRevision();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
};


/**
 * optional int64 stream_revision = 1;
 * @return {string}
 */
proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision.prototype.getStreamRevision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision} returns this
 */
proto.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision.prototype.setStreamRevision = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded.prototype.toObject = function(opt_includeInstance) {
  return proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxSize: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded}
 */
proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded;
  return proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded}
 */
proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxSize();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 max_size = 1;
 * @return {number}
 */
proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded.prototype.getMaxSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded} returns this
 */
proto.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded.prototype.setMaxSize = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.kurrentdb.protocol.v2.ExpectedRevisionConstants = {
  EXPECTED_REVISION_CONSTANTS_SINGLE_EVENT: 0,
  EXPECTED_REVISION_CONSTANTS_ANY: -2,
  EXPECTED_REVISION_CONSTANTS_NO_STREAM: -1,
  EXPECTED_REVISION_CONSTANTS_EXISTS: -4
};

goog.object.extend(exports, proto.kurrentdb.protocol.v2);
